{"version":3,"sources":["variables.js","AuditForm/api.js","components/timepicker.js","components/checkboxs.js","components/infoCards.js","components/simplePaper.js","loginCookies.js","AuditForm/AuditForm.js","LoginPage/api.js","LoginPage/LoginPage.js","ChangePassword/ChangePassword.js","App.js","index.js"],"names":["env","apiUrl","addCandidate","postBody","a","console","log","axios","post","res","getdataByCountyandsample","countyId","SampleId","get","response","data","newDateOfCount","String","Date","newTimeOfCount","undefined","DateOfCount","slice","TimeOfCount","CostOfCount","Number","TotalTime","VotingArray","VotingEquipmentUsed","split","newSampleDetail","CountyId","toString","ElectionDate","TypeOfSample","PrecinctSiteName","ContestName","CountyName","HumanOrMachineError","DifferenceExplanation","PeoplePartyCounting","getCandidateByCountyandsample","DatePickers","props","MuiPickersUtilsProvider","utils","DateFnsUtils","Grid","container","justifyContent","id","label","format","value","selectedDate","onChange","onDateChange","KeyboardButtonProps","error","formValidation","helperText","selectedTime","onTimeChange","CheckboxLabels","votingArray","list","FormGroup","row","FormControlLabel","control","Checkbox","checked","includes","onCheckBoxChange","name","color","useStyles","makeStyles","root","minWidth","margin","padding","textAlign","align","minHeight","height","title","fontSize","pos","SimpleCard","classes","Card","className","variant","CardContent","Typography","cardName","CardValue","theme","width","marginTop","text","cookieIntervalId","clearCookiesInterval","clearInterval","AuditForm","useState","React","CandidateName1","CandidateName2","sampleDetail","setSampleDetail","showExplanation","setShowExplanation","editMode","setEditMode","CandidatesCounts","setFormValidation","candidateData","setCandidateData","formInfoSubmitted","setFormInfoSubmitted","label1","label2","label1Color","label2Color","setLabel","storedValueAsNumber","window","localStorage","getItem","isInteger","countyID","setCountyID","getdataByCountyandsampleHandler","getCandidateByCountyandsampleHandler","handleReset","r","confirm","alert","updateCandidate","newData","canId","putbody","put","updateData","objIndex","findIndex","obj","SampleCandidateId","CandidateName","Machine","parseInt","HandToEye","DifferenceInCount","Math","abs","deleteCandidate","delete","updateSample","useEffect","hasDifference","map","some","item","userData","setItem","formControl","spacing","selectEmpty","outerColumn","borderRight","borderBottom","borderLeft","bigTitle","fontWeight","marginBottom","paddingTop","paddingLeft","textBox","formBox","border","entireForm","paddingRight","paddingBottom","cost","costInput","textField","marginLeft","marginRight","RadioGroup","aria-label","e","target","Box","borderColor","borderRadius","component","m","p","pr","pl","Radio","style","xs","alignItems","substring","date","time","NewTime","toLocaleString","timeZone","FormControl","FormLabel","event","updatedList","push","filter","FormHelperText","TextField","InputProps","startAdornment","InputAdornment","position","inputProps","min","max","type","field","editable","search","paging","sorting","actionsColumnIndex","onRowAdd","Promise","resolve","reject","then","onRowUpdate","oldData","onRowDelete","Action","action","icon","disabled","hidden","tooltip","onClick","Button","Container","Collapse","in","timeout","Fade","noValidate","autoComplete","multiline","rows","defaultValue","newFormValidation","length","HandToEyeIsZero","MachineIsZero","objs","trueCount","key","labeltochange","catch","message","scrollTo","top","behavior","getAllCounty","Copyright","Link","href","getFullYear","paper","display","flexDirection","avatar","backgroundColor","palette","secondary","main","form","submit","modal","paper2","background","boxShadow","shadows","LoginPage","counties","setCounties","history","useHistory","open","setOpen","getAllCountyFromAPI","maxWidth","CssBaseline","InputLabel","Select","labelId","onSelect","option","MenuItem","Modal","onClose","BackdropComponent","Backdrop","BackdropProps","mt","updatePassword","webUserId","password","ChargePassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","setError","setWebUserId","WebUserId","Avatar","required","fullWidth","Logout","onLogout","replace","App","userDataCookies","Cookies","JSON","parse","initUserData","setUserData","handleUserAuthenticated","handleOnselect","countyIdValue","IsDefault","to","download","exact","path","onUserAuthenticated","remove","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b4cd266b.chunk.js","sourcesContent":["export const env = process.env.NODE_ENV === 'production'? {\r\n    // apiUrl: 'https://sampleaudit.ncsbe.gov/'\r\n    apiUrl: 'https://data.ncsbe.gov/'\r\n}:{\r\n    apiUrl: 'http://localhost:4001/'\r\n}\r\n\r\n","import { env } from \"../variables\";\r\nimport axios from \"axios\";\r\n//npm run build will be production. \r\n\r\n\r\n export const addCandidate = async (postBody) => {\r\n    //const res = await axios.post(`${process.env.NODE_ENV}addCandidate`, putbody);\r\n    console.log(\"in add candidate\", `${env.apiUrl}sampleAudit/addCandidate`)\r\n\r\n    const res = await axios.post(`${env.apiUrl}sampleAudit/addCandidate`, postBody);\r\n    console.log(res)\r\n    return res\r\n  }\r\n\r\n\r\n\r\n  export const getdataByCountyandsample = async (countyId, SampleId) => {\r\n    console.log(countyId, SampleId)\r\n    const response = await axios.get(\r\n      `${env.apiUrl}sampleAudit/getDetailByCountySampleId/${countyId}/${SampleId}`\r\n    );\r\n    let data = await response.data;\r\n    console.log('data from api', data)\r\n    let newDateOfCount = String(new Date())\r\n    let newTimeOfCount = String(new Date())\r\n\r\n    if (data.DateOfCount == undefined || data.DateOfCount == null) {\r\n      //console.log ('Not in DB', data.DateOfCount)\r\n      //dateOfCount = dateOfCount.slice(0,-1)\r\n      //console.log(newDateOfCount)\r\n\r\n    } else {\r\n      //console.log ('Yes', data.DateOfCount)\r\n      newDateOfCount = String(data.DateOfCount)\r\n      newDateOfCount = newDateOfCount.slice(0, -1)\r\n    }\r\n\r\n\r\n    if (data.TimeOfCount == undefined || data.TimeOfCount == null) {\r\n      //console.log ('Not in DB', data.TimeOfCount)\r\n      //TimeOfCount = TimeOfCount.slice(0,-1)\r\n      //console.log(newTimeOfCount)\r\n    } else {\r\n      //console.log ('Yes', data.TimeOfCount)\r\n      newTimeOfCount = String(data.TimeOfCount)\r\n      newTimeOfCount = newTimeOfCount.slice(0, -1)\r\n    }\r\n\r\n    const CostOfCount = Number(data.CostOfCount)\r\n    const TotalTime = Number(data.TotalTime)\r\n    const VotingArray = data.VotingEquipmentUsed.split(',');\r\n                             \r\n    let newSampleDetail ={\r\n        CountyId: countyId,\r\n        SampleId: data.SampleId.toString(),  //why to string\r\n        ElectionDate: data.ElectionDate,\r\n        TypeOfSample: data.TypeOfSample,\r\n        PrecinctSiteName: data.PrecinctSiteName,\r\n        ContestName: data.ContestName,\r\n        CountyName: data.CountyName,\r\n        DateOfCount: newDateOfCount,\r\n        TimeOfCount: newTimeOfCount,\r\n        VotingEquipmentUsed: VotingArray,\r\n        HumanOrMachineError: data.HumanOrMachineError,\r\n        DifferenceExplanation: data.DifferenceExplanation,\r\n        PeoplePartyCounting: data.PeoplePartyCounting,\r\n        TotalTime: TotalTime,\r\n        CostOfCount: CostOfCount\r\n    }\r\n\r\n    return newSampleDetail\r\n  };\r\n\r\n\r\n  export const getCandidateByCountyandsample = async (countyId, SampleId) => {\r\n    try {\r\n      const response = await axios.get(`${env.apiUrl}sampleAudit/getCandidateByCountySampleId/${countyId}/${SampleId}`);\r\n      let data = await response.data;\r\n\r\n\r\n      return data\r\n    } catch (error) {\r\n      //console.error(error)\r\n    }\r\n  };\r\n\r\n","import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { parseISO } from 'date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport { convertToLocalTime } from 'date-fns-timezone';\r\n\r\n\r\n\r\n\r\n\r\nexport default function DatePickers(props) {\r\n\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid container justifyContent=\"space-around\">\r\n        <KeyboardDatePicker\r\n          //margin=\"small\"  \r\n          id=\"date-picker-dialog\"\r\n          label=\"Select Date of count\"\r\n          format=\"MM/dd/yyyy\"\r\n          value={props.selectedDate}\r\n          onChange={props.onDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n          error ={props.formValidation.DateOfCount}\r\n          helperText = { props.formValidation.DateOfCount ?'Required':''}\r\n        />\r\n        <KeyboardTimePicker\r\n          //margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Select Time of count\"\r\n          value={props.selectedTime}\r\n          onChange={props.onTimeChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n          error ={props.formValidation.TimeOfCount}\r\n          helperText = { props.formValidation.TimeOfCount ?'Required':''}\r\n        />\r\n\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n\r\n ","import React, { useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nexport default function CheckboxLabels(props) {\r\n//   const [state, setState] = React.useState({\r\n//     id:'3',\r\n//     VotingEquipmentUsed: []\r\n\r\n//   })\r\n  \r\n\r\n//   const handleChange = (event) => {\r\n//     let updatedList = state.VotingEquipmentUsed\r\n//     if (event.target.checked){\r\n//         updatedList.push(event.target.name)\r\n     \r\n//         }\r\n//     else{\r\n//         console.log('false', event.target.name)\r\n//         updatedList = updatedList.filter(e => e !== event.target.name)\r\n//         console.log('updatedList', updatedList)\r\n//     }\r\n    \r\n//     setState({VotingEquipmentUsed: updatedList})\r\n    \r\n//     }\r\n    \r\n//     useEffect(() => {\r\n        \r\n//         console.log('checkboxstate', state.VotingEquipmentUsed)\r\n//       }, [state]);\r\n\r\n// console.log(props.list)\r\n// console.log(typeof(props.list))\r\nconst votingArray = String(props.list).split(',')\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n          \r\n            checked={votingArray.includes(\"M100_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"M100_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"M100 tabulator\"\r\n      />\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"DS200_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"DS200_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"DS200 tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"D650_central_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"D650_central_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"D650 central tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"DS_850_central_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"DS_850_central_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"DS 850 central tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n          checked={votingArray.includes(\"Hart Verity\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"Hart Verity\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"Hart Verity\"\r\n      />    \r\n    \r\n    </FormGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 70,\r\n    margin: 0,\r\n    padding:0,\r\n    textAlign: \"center\",\r\n    align: \"center\",\r\n    minHeight: 5,\r\n    height: '100%'\r\n\r\n  },\r\n\r\n  title: {\r\n    fontSize: 14,\r\n    margin: 0,\r\n    padding:0,\r\n  },\r\n  pos: {\r\n    margin: 0,\r\n    padding:0,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} >\r\n          {props.cardName}\r\n        </Typography>\r\n\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {props.CardValue || 'N\\A'}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: 'flex',\r\n    width: '100%'\r\n  },\r\n  title:{\r\n    fontSize: 20,\r\n    margin: 1,\r\n    marginTop:10,\r\n    padding:1,\r\n    textAlign: \"center\",\r\n\r\n  },\r\n  text:{\r\n    margin: 10\r\n\r\n  }\r\n}));\r\n\r\nexport default function SimplePaper() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n\r\n      <Paper elevation={1}>\r\n      <Typography className={classes.title} >\r\n          Please Filled Out Following Form \r\n        </Typography>\r\n        <Grid item className={classes.text}>\r\n        Remember that the sample audit count is a test to show that the election equipment worked properly. If the hand count is different than the machine count, that difference must be explained. However, a difference in the count does NOT change election results.\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import Cookies from 'js-cookie';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst hasCookiesExpired =()=> Cookies.get('userData') === undefined;\r\n\r\nlet cookieIntervalId = null;\r\n\r\nexport function clearCookiesInterval() {\r\n  if (cookieIntervalId !== null) {\r\n    clearInterval(cookieIntervalId);\r\n    cookieIntervalId = null;\r\n  }\r\n}\r\n\r\nexport function useLoginCookiesTimer(userData, onOpenAlertDialog) {\r\n  const history = useHistory();\r\n  clearCookiesInterval();\r\n\r\n  cookieIntervalId = setInterval(() => {\r\n    console.log('timer', Cookies.get('userData.Email'))\r\n    if (hasCookiesExpired()) {\r\n      onOpenAlertDialog();\r\n      \r\n    }\r\n  }, 2000)\r\n}\r\n\r\nexport function setLoginCookies(userData) {\r\n  const in30Minutes = 1/48\r\n  const in15Minutes = 1/96\r\n\r\n  const in10Minutes = 1/144\r\n  //console.log('stay', userData)\r\n  Cookies.set('userData', JSON.stringify(userData), {\r\n      expires: in15Minutes\r\n  });\r\n}","import React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Grid, Button, Fade } from \"@material-ui/core\";\r\nimport { alpha } from '@material-ui/core/styles'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { forwardRef } from 'react';\r\n//import Edit from '@material-ui/icons/Edit';\r\nimport Check from '@material-ui/icons/Check';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport { env } from \"../variables\";\r\nimport { addCandidate, getdataByCountyandsample, getCandidateByCountyandsample, handleReset } from \"./api\";\r\n\r\n\r\nimport { AddBox, Edit } from \"@material-ui/icons\";\r\n//import moment from 'moment-timezone';\r\n\r\n//for dialog\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Countdown from 'react-countdown';\r\n\r\n\r\n\r\n//components\r\nimport DatePickers from '../components/timepicker';\r\nimport CheckboxLabels from '../components/checkboxs';\r\nimport Cards from '../components/infoCards';\r\nimport SimplePaper from '../components/simplePaper';\r\nimport { useLoginCookiesTimer, setLoginCookies } from '../loginCookies';\r\nimport AlertDialog from '../components/alertDialog'\r\nimport Cookies from 'js-cookie';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst AuditForm = (props) => {\r\n  const [alertDialog, setAlertDialog] = useState(false)\r\n\r\n  const handleClickOpen = () => {\r\n    setAlertDialog(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAlertDialog(false)\r\n   // setLoginCookies(props.userData)\r\n\r\n\r\n\r\n  };\r\n\r\n  //useLoginCookiesTimer(props.userData, handleClickOpen);\r\n\r\n\r\n\r\n  const emptySampleDetail = {\r\n    CountyId: \"\",\r\n    SampleId: \"\",\r\n    ElectionDate: \"\",\r\n    CountyName: \"\",\r\n    ContestName: \"\",\r\n    TypeOfSample: \"\",\r\n    PrecinctSiteName: \"\",\r\n    CandidateName1: \"\",\r\n    CandidateName2: \"\",\r\n    //to update\r\n    //DateOfCount: new Date(),\r\n    //TimeOfCount: new Date(),\r\n    // VotingEquipmentUsed: [],\r\n    // HumanOrMachineError: \"\",\r\n    // DifferenceExplanation: \"\",\r\n    // PeoplePartyCounting: \"\",\r\n    // TotalTime: \"\",\r\n    // CostOfCount: \"\"\r\n\r\n  }\r\n\r\n\r\n\r\n  const [sampleDetail, setSampleDetail] = React.useState({\r\n    ...emptySampleDetail\r\n  });\r\n\r\n  const [showExplanation, setShowExplanation] = useState(false)\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const [formValidation, setFormValidation] = useState({\r\n    DateOfCount: false,\r\n    TimeOfCount: false,\r\n    VotingEquipmentUsed: false,\r\n    TotalTime: false,\r\n    CostOfCount: false,\r\n    PeoplePartyCounting: false,\r\n    HumanOrMachineError: false,\r\n    DifferenceExplanation: false,\r\n    CandidatesCounts: false,\r\n\r\n  })\r\n\r\n  //  const [radioValue, setRadioValue] = useState('Human')\r\n\r\n  const [selectedSampleId, setSelectedSampleId] = useState('');\r\n\r\n  const [candidateData, setCandidateData] = useState([]);\r\n\r\n\r\n  const [formInfoSubmitted, setFormInfoSubmitted] = useState(false)\r\n\r\n  const [submitButtonLabel, setSubmitButtonLabel] = useState('Submit')\r\n\r\n  const [label, setLabel] = useState({\r\n    label1: \"\",\r\n    label2: \" Done\",\r\n    label1Color: \"warning.main\",\r\n    label2Color: \"warning.main\"\r\n\r\n  })\r\n\r\n\r\n  const storedValueAsNumber = Number(window.localStorage.getItem('countyID'))\r\n\r\n  const [countyID, setCountyID] = useState(\r\n    \r\n Number.isInteger(storedValueAsNumber) ? storedValueAsNumber : null\r\n  )\r\n\r\n\r\n\r\n\r\n  const getdataByCountyandsampleHandler = async (countyId, SampleId) => {\r\n    let response = await getdataByCountyandsample(countyId, SampleId)\r\n    // setSampleDetail({\r\n    //   ...sampleDetail,\r\n    //   CountyId: countyId,\r\n    //   SampleId: data.SampleId.toString(),\r\n    //   ElectionDate: data.ElectionDate,\r\n    //   TypeOfSample: data.TypeOfSample,\r\n    //   PrecinctSiteName: data.PrecinctSiteName,\r\n    //   ContestName: data.ContestName,\r\n    //   CountyName: data.CountyName,\r\n    //   DateOfCount: newDateOfCount,\r\n    //   TimeOfCount: newTimeOfCount,\r\n    //   VotingEquipmentUsed: VotingArray,\r\n    //   HumanOrMachineError: data.HumanOrMachineError,\r\n    //   DifferenceExplanation: data.DifferenceExplanation,\r\n    //   PeoplePartyCounting: data.PeoplePartyCounting,\r\n    //   TotalTime: TotalTime,\r\n    //   CostOfCount: CostOfCount\r\n    // });\r\n    console.log('Response', response)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      ...response\r\n\r\n    });\r\n  };\r\n\r\n\r\n  const getCandidateByCountyandsampleHandler = async (countyId, SampleId) => {\r\n    let data = await getCandidateByCountyandsample(countyId, SampleId)\r\n    setCandidateData(data);\r\n  };\r\n\r\n  const handleReset = async () => {\r\n\r\n    let r = window.confirm(\"Are you sure you want to reset the table?\\n All edited data will be lost!\");\r\n\r\n    let postBody = {\r\n      \"countyId\": sampleDetail.CountyId,\r\n      \"sampleId\": sampleDetail.SampleId\r\n    }\r\n    if (r == true) {\r\n      const res = await axios.post(`${env.apiUrl}sampleAudit/getDefaultCandidateByCountySampleId`, postBody);\r\n\r\n      console.log('executed the stored procedures', res)\r\n      getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId)\r\n\r\n      //setFormValidation({ ...formValidation, CandidatesCounts: true })\r\n\r\n      alert('Please edit the table again.')\r\n\r\n\r\n    } else {\r\n\r\n    }\r\n  };\r\n\r\n  const handleRadioButton = (e) => {\r\n    let CountyId = sampleDetail.CountyId\r\n    let SampleId = e.target.value\r\n    getdataByCountyandsampleHandler(CountyId, SampleId)\r\n    getCandidateByCountyandsampleHandler(CountyId, SampleId);\r\n    setFormValidation({\r\n      DateOfCount: false,\r\n      TimeOfCount: false,\r\n      VotingEquipmentUsed: false,\r\n      TotalTime: false,\r\n      CostOfCount: false,\r\n      PeoplePartyCounting: false,\r\n      HumanOrMachineError: false,\r\n      DifferenceExplanation: false,\r\n      CandidatesCounts: false,\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const updateCandidate = async (newData, canId, putbody) => {\r\n    //console.log('putbody', putbody)\r\n    //console.log('canId', canId)  \r\n    const res = await axios.put(`${env.apiUrl}sampleAudit/updateCandidate`, putbody);\r\n    // console.log(candidateData)\r\n    let updateData = [...candidateData]\r\n    let objIndex = updateData.findIndex((obj => obj.SampleCandidateId == newData.SampleCandidateId));\r\n    updateData[objIndex].CandidateName = newData.CandidateName\r\n    updateData[objIndex].Machine = parseInt(newData.Machine)\r\n    updateData[objIndex].HandToEye = parseInt(newData.HandToEye)\r\n    updateData[objIndex].DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n    setCandidateData(updateData)\r\n  }\r\n\r\n\r\n\r\n  const deleteCandidate = async (SampleCandidateId) => {\r\n    //const res = await axios.post(`${process.env.NODE_ENV}addCandidate`, putbody);\r\n    console.log(\"In Delete Candidate\", `${env.apiUrl}sampleAudit/deleteCandidate/${SampleCandidateId}`)\r\n\r\n    const res = await axios.delete(`${env.apiUrl}sampleAudit/deleteCandidate/${SampleCandidateId}`);\r\n    console.log(res)\r\n    return res\r\n\r\n  }\r\n\r\n  const updateSample = async (CountyId, SampleId, putbody) => {\r\n\r\n    console.log(`${env.apiUrl}sampleAudit/updateSample`, putbody)\r\n    const res = await axios.put(`${env.apiUrl}sampleAudit/updateSample`, putbody);\r\n    console.log(res)\r\n\r\n  }\r\n\r\n\r\n\r\n  const hasError = () => {\r\n    let showError = false\r\n    //showExplanation\r\n    if (showExplanation) {\r\n\r\n      let keyList = [\r\n        'DateOfCount',\r\n        'TimeOfCount',\r\n        'VotingEquipmentUsed',\r\n        'TotalTime',\r\n        'CostOfCount',\r\n        'PeoplePartyCounting'\r\n      ]\r\n\r\n      for (var key in keyList) {\r\n        if (formValidation[key]) showError = true;\r\n      }\r\n\r\n    } else {\r\n\r\n      let keyList = [\r\n        'DateOfCount',\r\n        'TimeOfCount',\r\n        'VotingEquipmentUsed',\r\n        'TotalTime',\r\n        'CostOfCount',\r\n        'PeoplePartyCounting',\r\n        'HumanOrMachineError',\r\n        'DifferenceExplanation'\r\n      ]\r\n\r\n      for (var key in keyList) {\r\n        if (formValidation[key]) showError = true;\r\n      }\r\n    }\r\n\r\n    return showError\r\n\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n        top: 10,\r\n        behavior: \"smooth\",\r\n    });\r\n};\r\n\r\n  const handleSubmit = (e) => {\r\n    console.log('edit mode', editMode)\r\n\r\n    if (editMode){\r\n      alert(\"You are still editng one candidate record, please save it.\")\r\n      return\r\n    }\r\n\r\n    let newFormValidation = { ...formValidation };\r\n\r\n    //newFormValidation = !sampleDetail.DateOfCount ? { ...newFormValidation, DateOfCount: true } : newFormValidation;\r\n    //newFormValidation = !sampleDetail.TimeOfCount ? { ...newFormValidation, TimeOfCount: true } : newFormValidation;\r\n    newFormValidation = sampleDetail.VotingEquipmentUsed.length === 1 ? { ...newFormValidation, VotingEquipmentUsed: true } : newFormValidation;\r\n    newFormValidation = showExplanation && !sampleDetail.HumanOrMachineError ? { ...newFormValidation, HumanOrMachineError: true } : newFormValidation;\r\n    newFormValidation = showExplanation && !sampleDetail.DifferenceExplanation ? { ...newFormValidation, DifferenceExplanation: true } : newFormValidation;\r\n    newFormValidation = !sampleDetail.PeoplePartyCounting ? { ...newFormValidation, PeoplePartyCounting: true } : newFormValidation;\r\n    //newFormValidation = !sampleDetail.CostOfCount ? { ...newFormValidation, CostOfCount: true } : newFormValidation;\r\n    newFormValidation = !sampleDetail.TotalTime ? { ...newFormValidation, TotalTime: true } : newFormValidation;\r\n\r\n    let HandToEyeIsZero = candidateData.some(obj => obj.HandToEye != 0)\r\n    let MachineIsZero = candidateData.some(objs => objs.Machine != 0)\r\n\r\n\r\n    newFormValidation = !HandToEyeIsZero && !MachineIsZero ? { ...newFormValidation, CandidatesCounts: true } : newFormValidation;\r\n\r\n    setFormValidation(newFormValidation)\r\n\r\n    // if sampleDetail.DateOfCount \r\n\r\n    //loop throuh every properties in the obj\r\n    //console.log('sampleDetail', sampleDetail)\r\n    //console.log('validation object', newFormValidation)\r\n    let trueCount = 0\r\n\r\n    for (var key in newFormValidation) {\r\n      if (newFormValidation[key]) {\r\n        trueCount += 1\r\n      }\r\n    }\r\n\r\n    //trueCount== 0\r\n    if (trueCount == 0) {\r\n      //console.log(sampleDetail.SampleId)\r\n      var labeltochange = 'label' + sampleDetail.SampleId + \"Color\"\r\n      //console.log(labeltochange)\r\n      //use square bracket we can pass in string \r\n      setLabel({ ...label, [labeltochange]: \"success.main\" })\r\n\r\n\r\n\r\n      updateSample(sampleDetail.CountyId, sampleDetail.SampleId, sampleDetail)\r\n        .then(response => {\r\n          //console.log(response)\r\n          setFormInfoSubmitted(false);\r\n        })\r\n        .catch(error => {\r\n          //console.log(error)\r\n        })\r\n\r\n      let message = \"Sample \" + sampleDetail.SampleId + \" submitted\"\r\n\r\n      alert(message);\r\n\r\n      scrollToTop();\r\n\r\n\r\n    } else {\r\n      alert(\"Please fill all required cells\")\r\n\r\n\r\n      setFormInfoSubmitted(false)\r\n\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  var title = <h1>Sample Audit Record</h1>;\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Contest / Candidate\", field: \"CandidateName\",\r\n\r\n\r\n    },\r\n    {\r\n      title: \"Machine\", field: \"Machine\", type: \"numeric\",\r\n\r\n\r\n    },\r\n    {\r\n      title: \"Hand-To-Eye\", field: \"HandToEye\", type: \"numeric\",\r\n      //validate: rowData => rowData.year === undefined || rowData.year === \"\" ? \"Required\" : true\r\n      //helperText:'Invalid Email'\r\n\r\n    },\r\n    {\r\n      title: \"Difference In Count\", field: 'DifferenceInCount', editable: 'never', type: \"numeric\",\r\n      //validate: rowData => rowData.fee === undefined || rowData.fee === \"\" ? \"Required\" : true\r\n    }]\r\n\r\n  const tableIcons = {\r\n    // Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),   \r\n    // Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    // Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    // Check: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\r\n\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n\r\n    // newDateOfCount = String(data.DateOfCount)\r\n    // newDateOfCount = newDateOfCount.slice(0,-1)\r\n\r\n\r\n    date = String(date)\r\n    date = date.slice(0, -1)\r\n\r\n    //console.log('data of count', date)\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      DateOfCount: date\r\n\r\n    })\r\n    setFormValidation({ ...formValidation, DateOfCount: false })\r\n  }\r\n\r\n  const handleTimeChange = (time) => {\r\n\r\n    //console.log('OG time of count', time)\r\n\r\n    //console.log('dateChange', date)\r\n    const NewTime = time.toLocaleString('en-US', { timeZone: 'America/New_York' })\r\n    //console.log('NewTime', NewTime)\r\n\r\n\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      TimeOfCount: NewTime\r\n\r\n    })\r\n    setFormValidation({ ...formValidation, TimeOfCount: false })\r\n  }\r\n\r\n\r\n  const handleCheckbox = (event) => {\r\n\r\n    let updatedList = sampleDetail.VotingEquipmentUsed;\r\n\r\n\r\n\r\n    if (event.target.checked) {\r\n      updatedList.push(event.target.name)\r\n    }\r\n    else {\r\n      updatedList = updatedList.filter(e => e !== event.target.name)\r\n    }\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      VotingEquipmentUsed: updatedList\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, VotingEquipmentUsed: false })\r\n\r\n  }\r\n\r\n\r\n  const handleHourInput = (e) => {\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      TotalTime: e.target.value\r\n    })\r\n    setFormValidation({ ...formValidation, TotalTime: false })\r\n  }\r\n\r\n  const handleCostInput = (e) => {\r\n    console.log('costhandle', e.target.value)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      CostOfCount: e.target.value\r\n    })\r\n    setFormValidation({ ...formValidation, CostOfCount: false })\r\n  }\r\n\r\n  const handleRadio = (e) => {\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      HumanOrMachineError: e.target.value\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, HumanOrMachineError: false })\r\n\r\n  }\r\n\r\n\r\n  const handleExplanation = (e) => {\r\n    console.log(e.target.value)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      DifferenceExplanation: e.target.value\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, DifferenceExplanation: false })\r\n\r\n  }\r\n\r\n  const handlePeople = (e) => {\r\n    console.log('people value', e.target.value)\r\n    setFormValidation({ ...formValidation, PeoplePartyCounting: false })\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      PeoplePartyCounting: e.target.value\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    let DifferenceList = candidateData.map(a => a.DifferenceInCount);\r\n    let hasDifference = DifferenceList.some(item => item !== 0)\r\n\r\n\r\n    hasDifference ? setShowExplanation(true) : setShowExplanation(false)\r\n\r\n\r\n  }, [candidateData]);\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n\r\n    console.log('from first useeffect', props.userData.CountyId)\r\n\r\n    props.userData.CountyId? setCountyID(props.userData.CountyId): setCountyID(Number(window.localStorage.getItem('countyID')))\r\n    //setCountyID(props.userData.CountyId)\r\n    //setCountyID(JSON.parse(window.localStorage.getItem('countyID')));\r\n \r\n\r\n  }, []);\r\n\r\n\r\n  React.useEffect(() => {\r\n    // console.log(props.userData)\r\n    // console.log(props.userData.CountyId)\r\n    //let countyID = props.userData.CountyId;\r\n    //setCountyID(props.userData.CountyId)\r\n    //localStorage.setItem(\"count\", String(count))\r\n    window.localStorage.setItem('countyID', countyID);\r\n    console.log('from state ',countyID)\r\n    let SampleId = 1\r\n    getdataByCountyandsampleHandler(countyID, SampleId);\r\n    getCandidateByCountyandsampleHandler(countyID, SampleId);\r\n    //console.log(sampleDetail.SampleId)\r\n  }, [countyID]);\r\n\r\n\r\n  // React.useEffect(() => {\r\n  //   setCountyID(JSON.parse(window.localStorage.getItem('countyID')));\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   window.localStorage.setItem('countyID', countyID);\r\n  // }, [countyID]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //Style\r\n  const useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    outerColumn: {\r\n      borderRight: \"1px solid grey\",\r\n      borderBottom: \"1px solid grey\",\r\n      borderLeft: \"1px solid grey\"\r\n    },\r\n    bigTitle: {\r\n      textAlign: \"center\",\r\n      fontSize: 30,\r\n      color: \"blue\",\r\n      fontWeight: 800,\r\n      margin: 5,\r\n      padding: 5,\r\n    },\r\n    title: {\r\n      textAlign: \"center\",\r\n      fontSize: 15,\r\n      color: \"blue\",\r\n      fontWeight: 600,\r\n      margin: 0,\r\n      marginBottom: 5,\r\n      padding: 0,\r\n    },\r\n    error: {\r\n      textAlign: \"center\",\r\n      fontSize: 18,\r\n      color: \"red\",\r\n      fontWeight: 600,\r\n      margin: 0,\r\n      marginBottom: 5,\r\n      padding: 0,\r\n    },\r\n    text: {\r\n      //textAlign: \"left\",\r\n      fontSize: 13,\r\n      color: \"blue\",\r\n      fontWeight: 500,\r\n      //margin: 1,\r\n      //marginBottom: 5,\r\n      paddingTop: 10,\r\n      paddingLeft: 50\r\n    },\r\n    textBox: {\r\n      paddingTop: 6,\r\n      '& .MuiTextField-root': {\r\n        margin: theme.spacing(0),\r\n        width: '100%',\r\n      },\r\n\r\n    },\r\n    formBox: {\r\n      border: \"1px solid grey\",\r\n      // margin: 20\r\n\r\n    },\r\n    entireForm: {\r\n      paddingTop: 30,\r\n      paddingLeft: '10%',\r\n      paddingRight: '10%',\r\n      paddingBottom: 50,\r\n    },\r\n    VotingEquipmentUsed: {\r\n      paddingLeft: 15\r\n\r\n    },\r\n    cost: {\r\n      padding: 15,\r\n\r\n\r\n    },\r\n    costInput: {\r\n      paddingLeft: 30\r\n\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      '& p': {\r\n        color: 'red',\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  const defaultProps = {\r\n    bgcolor: 'background.paper',\r\n    // color: 'blue',\r\n    m: 1,\r\n    style: { width: '80%', height: \"15vw\" },\r\n    borderColor: 'text.primary',\r\n  };\r\n\r\n\r\n\r\n  const renderer = ({ seconds }) => {\r\n    return (\r\n      <span>\r\n        Automatically logout in {seconds} Seconds.\r\n      </span>\r\n    )\r\n  };\r\n\r\n\r\n\r\n  const clickFunction = () => {\r\n    console.log('API URL', `${process.env.REACT_APP_API}addCandidate`)\r\n\r\n    // console.log('sampleDetail Clicked', sampleDetail)\r\n    console.log('candidateData', candidateData)\r\n\r\n    //console.log('sampleDetail.CostOfCount', sampleDetail.CostOfCount)\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <Grid>\r\n\r\n      <Grid container className={classes.entireForm} spacing={2} >\r\n\r\n\r\n        <Grid container item justifyContent='center' >\r\n          {title}\r\n\r\n          {/* <button onClick={handleClickOpen}> click</button> */}\r\n\r\n          {/* <button onClick={clickFunction}> click2</button> */}\r\n\r\n\r\n\r\n\r\n          {/* <AlertDialog open={alertDialog} userData={props.userData} handleClose={handleClose} /> */}\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justifyContent='center' spacing={1}>\r\n          {/* <FormControl component=\"fieldset\"> */}\r\n          {/* <FormLabel component=\"legend\">Sample</FormLabel> */}\r\n          {/* <Grid item xs={3}>Sample</Grid> */}\r\n          {/* <RadioGroup aria-label=\"gender\" name=\"gender1\" value={sampleDetail.SampleId} onChange={handleRadioButton}> */}\r\n          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={sampleDetail.SampleId} onChange={handleRadioButton} row>\r\n            {/* <Grid item ><FormControlLabel value='1' control={<Radio />} label=\"Sample One\" /></Grid> */}\r\n            <Box border={3} borderColor={label.label1Color} borderRadius={16} component=\"span\" m={1} p={0} pr={1} pl={1}>\r\n              <FormControlLabel value='1' control={<Radio />} label={<span style={{ fontSize: '120%' }}>Sample One</span>} />\r\n\r\n            </Box>\r\n\r\n            <Box border={3} borderColor={label.label2Color} borderRadius={16} component=\"span\" m={1} p={0} pr={1} pl={1}>\r\n              <FormControlLabel value='2' control={<Radio />} label={<span style={{ fontSize: '120%' }}>Sample Two</span>} />\r\n            </Box>\r\n\r\n          </RadioGroup>\r\n          {/* </FormControl> */}\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n\r\n    {sampleDetail.PrecinctSiteName ==='not enough samples'?\r\n             <Grid item xs={12} className={classes.bigTitle}>\r\n         Not enough samples\r\n           </Grid>\r\n:\r\n\r\n//{ true &&\r\n\r\n\r\n<Grid container className={classes.entireForm} spacing={2} >\r\n<Grid container item spacing={0} justifyContent='space-between' alignItems='stretch'>\r\n\r\n  <Grid item xs >\r\n    <Cards cardName={'County'} CardValue={sampleDetail.CountyName} />\r\n  </Grid>\r\n\r\n  <Grid item xs >\r\n    <Cards cardName={'Election Date'} CardValue={sampleDetail.ElectionDate.toString().substring(0, 10)} />\r\n  </Grid>\r\n  {/* <Grid item xs >\r\n  <Cards cardName={'Contest Name'} CardValue={sampleDetail.ContestName} />\r\n  </Grid> */}\r\n  <Grid item xs >\r\n    <Cards cardName={'Type Of Sample'} CardValue={sampleDetail.TypeOfSample} />\r\n  </Grid>\r\n  <Grid item xs >\r\n    <Cards cardName={'Site Name'} CardValue={sampleDetail.PrecinctSiteName} />\r\n  </Grid>\r\n</Grid>\r\n\r\n\r\n{/* <Grid container item spacing={10} justifyContent='center'>\r\n<Grid item xs={12} spacing={10}>\r\n  <SimplePaper></SimplePaper>\r\n</Grid>\r\n</Grid> */}\r\n\r\n{/* form starts here */}\r\n<Grid container item spacing={0} justifyContent='center'>\r\n\r\n\r\n  <Box border={1} padding={2}>\r\n    <Grid container spacing={2} justifyContent='center'>\r\n      <Grid item xs={12} className={classes.bigTitle}>\r\n        Sample Audit Form\r\n      </Grid>\r\n\r\n      <Grid container item xs={12}>\r\n\r\n\r\n        <Grid item xs={6} style={{ border: \"1px solid grey\" }}>\r\n          <Typography className={classes.title}>Select date and time</Typography>\r\n          <DatePickers onDateChange={handleDateChange} onTimeChange={handleTimeChange}\r\n            selectedDate={sampleDetail.DateOfCount} selectedTime={sampleDetail.TimeOfCount}\r\n            formValidation={formValidation} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} className={classes.VotingEquipmentUsed} style={{ border: \"1px solid grey\" }}>\r\n          <FormControl error={formValidation.VotingEquipmentUsed}>\r\n            <FormLabel ><Typography className={classes.title}>Voting equipment used for this sample</Typography></FormLabel>\r\n\r\n            <CheckboxLabels\r\n              onCheckBoxChange={handleCheckbox}\r\n              list={sampleDetail.VotingEquipmentUsed}>\r\n            </CheckboxLabels>\r\n\r\n            <FormHelperText>{formValidation.VotingEquipmentUsed ? 'Required' : ''}</FormHelperText>\r\n          </FormControl>\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container item xs={6} style={{ border: \"1px solid grey\" }} className={classes.cost} >\r\n          <Grid item>\r\n            <Typography className={classes.title}>Time necessary to complete this count (not BOTH counts)</Typography>\r\n          </Grid>\r\n\r\n          <Grid item className={classes.costInput}>\r\n            <TextField\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">Hr</InputAdornment>,\r\n                inputProps: { min: 0, max: 30 },\r\n              }}\r\n              //required\r\n              type=\"number\"\r\n              id=\"filled-required\"\r\n              value={sampleDetail.TotalTime}\r\n\r\n\r\n              //variant=\"filled\"\r\n              onChange={handleHourInput}\r\n              error={formValidation.TotalTime}\r\n              helperText={formValidation.TotalTime ? 'Required' : ''}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item xs={6} style={{ border: \"1px solid grey\" }} className={classes.cost} >\r\n          <Grid item className={classes.title}>\r\n            <Typography className={classes.title}> Cost or estimated cost of this count (not BOTH counts)</Typography>\r\n          </Grid>\r\n\r\n          <Grid item className={classes.costInput}  >\r\n            <TextField\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                inputProps: { min: 0, max: 99999 },\r\n              }}\r\n              //required\r\n              type=\"number\"\r\n              id=\"filled-required\"\r\n\r\n              value={sampleDetail.CostOfCount}\r\n\r\n              //variant=\"filled\"\r\n              onChange={handleCostInput}\r\n              // error={formValidation.CostOfCount}\r\n              // helperText={formValidation.CostOfCount ? 'Required' : ''}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n\r\n\r\n        <MaterialTable\r\n          title=\"Enter counts for each candidates\"\r\n          title={formValidation.CandidatesCounts ?\r\n            <Typography className={classes.error}>Please make sure all candidate counts have been entered correctly.</Typography>\r\n            : \"Enter counts for each candidates\"}\r\n          columns={columns}\r\n          data={candidateData}\r\n          // icons={tableIcons} //table icons are imported in index.html\r\n\r\n          options={{\r\n            search: false,\r\n            paging: false,\r\n            sorting: false,\r\n            actionsColumnIndex: -1,\r\n\r\n          }}\r\n\r\n          style={formValidation.CandidatesCounts && { border: '2px solid red' }}\r\n\r\n\r\n\r\n          editable={{\r\n\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                let DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n\r\n                console.log(sampleDetail)\r\n\r\n                let postBody = {\r\n                  \"CountyId\": sampleDetail.CountyId,\r\n                  \"SampleId\": sampleDetail.SampleId,\r\n                  \"CandidateName\": newData.CandidateName || 'Please provide valid candidate name',\r\n                  \"Machine\": newData.Machine || 0,\r\n                  \"HandToEye\": newData.HandToEye || 0,\r\n                  \"DifferenceInCount\": DifferenceInCount || 0\r\n                }\r\n                addCandidate(postBody).then(response => {\r\n                  \r\n                  getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId).then(() => {\r\n                    resolve()\r\n\r\n                  })\r\n\r\n                });\r\n\r\n\r\n              }),\r\n\r\n\r\n            onRowUpdate:\r\n\r\n              (newData, oldData) => new Promise((resolve, reject) => {\r\n\r\n\r\n                setFormValidation({ ...formValidation, CandidatesCounts: false })\r\n                //Backend call\r\n                let canId = oldData.SampleCandidateId\r\n                //let putbody = JSON.stringify(newData)\r\n\r\n                let DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n                // DifferenceInCount == 0 ? setShowExplanation('none') : setShowExplanation('block');\r\n\r\n                let putbody = {\r\n                  \"SampleCandidateId\": newData.SampleCandidateId,\r\n                  \"CandidateName\": newData.CandidateName,\r\n                  \"Machine\": newData.Machine,\r\n                  \"HandToEye\": newData.HandToEye,\r\n                  \"DifferenceInCount\": DifferenceInCount\r\n                }\r\n\r\n                //console.log(putbody);\r\n                //Promise.then() takes two arguments, a callback for success and another for failure.\r\n                //Both are optional, so you can add a callback for success or failure only.\r\n                // here response can be any word \r\n                updateCandidate(newData, canId, putbody).then(response => {\r\n                  //console.log(response)\r\n                  resolve()\r\n                });\r\n\r\n                // axios.put(`https://sampleaudit.ncsbe.gov/updateCandidate/${canId}`, putbody)\r\n                // .then((response, rejct) => {\r\n                //   let updateDate = candidateData\r\n                //   let objIndex = updateDate.findIndex(( obj => obj.CandidateId == newData.CandidateId));     \r\n                //   updateDate[objIndex].Machine = newData.Machine\r\n                //   updateDate[objIndex].HandToEye = newData.HandToEye\r\n                //   updateDate[objIndex].DifferenceInCount = newData.DifferenceInCount\r\n                //   setCandidateData(updateDate)\r\n\r\n                // resolve()\r\n\r\n                // });\r\n                // //why resolve here. will not wait for axios and we since it is a promise we need to excute the resolce. \r\n                // or we can do somthing like resolve('done') but we don't know what material table is going to do with this resolve. \r\n\r\n                // //resolve()\r\n              }),\r\n\r\n            onRowDelete: oldData =>\r\n              new Promise(resolve => {\r\n                let SampleCandidateId = oldData.SampleCandidateId\r\n                console.log(SampleCandidateId)\r\n\r\n                deleteCandidate(SampleCandidateId).then(response => {\r\n                  console.log('oldData', oldData)\r\n                  console.log('sampleDetail.CountyId', sampleDetail.CountyId)\r\n\r\n                  getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId).then(() => {\r\n                    resolve()\r\n                  })\r\n\r\n\r\n                })\r\n\r\n\r\n              }),\r\n\r\n\r\n          }}\r\n\r\n          components={{\r\n            Action: (props) => {\r\n              const action =\r\n                typeof props.action === \"function\" ? props.action() : props.action;\r\n    \r\n              return (\r\n                <action.icon\r\n                  disabled={action.disabled}\r\n                  hidden={action.hidden}\r\n                  tooltip={action.tooltip}\r\n                  onClick={(event) => {\r\n                    console.log('from action', action.tooltip);\r\n                    setEditMode(\r\n                      action.tooltip === \"Edit\" ||\r\n                        action.tooltip === \"Add\" ||\r\n                        action.tooltip === \"Delete\"\r\n                    );\r\n                    action.onClick(event, props.data);\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n          }}\r\n\r\n          \r\n        />\r\n\r\n        <Grid item spacing={12} justifyContent='center'>\r\n          <br />\r\n          <Button variant=\"contained\" color=\"secondary\"\r\n\r\n\r\n            onClick={handleReset}\r\n          >\r\n            Reset Table\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid Container item xs={12} justifyContent='center' spacing={5}>\r\n        {/* <Collapse in={showExplanation} timeout={1500}>\r\n        <Fade in={showExplanation} timeout={500}> */}\r\n\r\n        <Collapse in={true} timeout={1000} justifyContent='center'>\r\n          <Fade in={true} timeout={1000} justifyContent='center'>\r\n\r\n            <Grid container justifyContent='center'\r\n              style={formValidation.DifferenceExplanation && { border: '2px solid red' }}>\r\n              <Grid item className={classes.title}>\r\n                <Typography className={classes.title}>Explanation of any difference (skip this section if there was no difference in any totals)</Typography>\r\n                {/* error={formValidation.PeoplePartyCounting}\r\n          helperText={formValidation.PeoplePartyCounting ? 'Required' : ' '} */}\r\n              </Grid>\r\n\r\n\r\n              <Grid container item xs={12} justifyContent='center' style={{ border: \"1px solid grey\" }} >\r\n                <Grid item xs={8} className={classes.text} justifyContent='center'>\r\n                  <Typography className={classes.title}>If there is a difference, is it attributable to machine error or human error?</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} justifyContent='center'>\r\n                  <RadioGroup row onChange={handleRadio} value={String(sampleDetail.HumanOrMachineError)}>\r\n\r\n                    <FormControlLabel value=\"Machine\" control={<Radio />} label=\"Machine error\" />\r\n                    <FormControlLabel value=\"Human\" control={<Radio />} label=\"Human error\" />\r\n                  </RadioGroup>\r\n                </Grid>\r\n              </Grid>\r\n\r\n\r\n\r\n              <Grid item xs={12} className={classes.textBox}>\r\n\r\n                <Grid item xs={12} className={classes.title}>\r\n                  <Typography className={classes.title}>Detailed explanation of what caused the difference</Typography>\r\n\r\n                </Grid>\r\n                <form noValidate autoComplete=\"on\">\r\n\r\n                  <TextField\r\n                    id=\"outlined-multiline-static\"\r\n                    // label=\"Detailed explanation of what caused the difference\"\r\n                    multiline\r\n                    rows={5}\r\n                    value={sampleDetail.DifferenceExplanation}\r\n                    defaultValue=''\r\n                    variant=\"outlined\"\r\n                    onChange={handleExplanation}\r\n                  />\r\n\r\n                </form>\r\n              </Grid>\r\n\r\n            </Grid>\r\n          </Fade>\r\n        </Collapse>\r\n      </Grid>\r\n\r\n      <Grid Container item xs={12} justifyContent='center' spacing={5}>\r\n\r\n        <Grid item xs={12} className={classes.title}>\r\n          <Typography className={classes.title}>Who conducted the count (must consist of multiple persons of different party affiliation)</Typography>\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.textBox}>\r\n          <TextField\r\n\r\n            id=\"outlined-multiline-static\"\r\n            //label=\"Name, Party affiliation;\"\r\n            multiline\r\n            rows={5}\r\n            //defaultValue={sampleDetail.PeoplePartyCounting}\r\n            value={sampleDetail.PeoplePartyCounting}\r\n            variant=\"outlined\"\r\n            onChange={handlePeople}\r\n\r\n\r\n            //className={classes.textField}\r\n            error={formValidation.PeoplePartyCounting}\r\n            helperText={formValidation.PeoplePartyCounting ? 'Required' : ' '}\r\n          />\r\n        </Grid>\r\n\r\n\r\n      </Grid>\r\n\r\n\r\n\r\n      {/* <Collapse in={hasError()} timeout={1500}>\r\n      <Fade in={hasError()} timeout={500}>\r\n        <Grid container item xs={12} justifyContent='center' >\r\n          Please filled out required\r\n        </Grid>\r\n      </Fade>\r\n    </Collapse> */}\r\n\r\n      <Grid item spacing={12} justifyContent='center'>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={handleSubmit}\r\n          disabled={formInfoSubmitted}\r\n        >\r\n          {\r\n            (formInfoSubmitted && 'Your form is submitted!')\r\n            || (!formInfoSubmitted && 'Submit')\r\n\r\n          }\r\n        </Button>\r\n      </Grid>\r\n\r\n    </Grid>\r\n\r\n  </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</Grid>\r\n\r\n</Grid>\r\n    \r\n    }\r\n\r\n     \r\n\r\n    </Grid>\r\n\r\n  );\r\n};\r\n\r\nexport default AuditForm;\r\n","import axios from \"axios\";\r\nimport { env } from \"../variables\";\r\n\r\nexport const authenticateUser = async (email, password)=>{\r\n    let putbody = {\r\n      \"email\": email,\r\n      \"password\": password\r\n    }\r\n\r\n\r\n    const response = await axios.put(\r\n        `${env.apiUrl}auth/check/${email}`, putbody\r\n      );\r\n\r\n      if (response.data === \"User not found\"){\r\n        return \"Email not in the system\"\r\n      }else{\r\n        let userData = await response.data;\r\n\r\n        return userData;\r\n\r\n      }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getAllCounty = async ()=>{\r\n \r\n  let response = await axios.get(\r\n    `${env.apiUrl}sampleAudit/allCounty/`\r\n  );\r\n\r\n  return response\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\n\r\n\r\nimport { authenticateUser, getAllCounty } from './api';\r\nimport axios from 'axios';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://www.ncsbe.gov/\">\r\n        NCSBE\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper2: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[1],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function LoginPage(props) {\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const [counties, setCounties] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    //console.log('conties data from hook',counties[0].label)\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const handleEmail = (e) => {\r\n    console.log(e.target.value)\r\n    setEmail(e.target.value)\r\n  }\r\n\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n// for drop down\r\n  const getAllCountyFromAPI = async () =>{\r\n    let response = await getAllCounty();\r\n    console.log(response)\r\n\r\n    setCounties(response.data);\r\n    console.log(counties)\r\n  }\r\n\r\n\r\n  React.useEffect(() => {\r\n    getAllCountyFromAPI()\r\n    console.log('conties data from hook',counties)\r\n  }, []);\r\n\r\n\r\n  const handleChange = (e)=>{\r\n    //alert (e.target.value)\r\n    //console.log(e.target)\r\n    props.onSelect(e.target.value);\r\n\r\n    history.push('/audit-form')\r\n\r\n  }\r\n\r\n  const handleLogin = async () => {\r\n    //get data through API and vrify login\r\n    if (!email) { alert(\"please enter email\") }\r\n    if (!password) { alert(\"please enter password\") }\r\n\r\n\r\n    // props.onUserAuthenticated({\r\n    //   IsDefault: \"False\",\r\n    //   CountyId: 1\r\n    // });\r\n    // history.push('/audit-form');\r\n    // return;\r\n\r\n    const userData = await authenticateUser(email, password);\r\n\r\n    if (userData === \"Account not in the system\") {\r\n      alert(userData)\r\n    }\r\n    else if (userData === \"login fail\") {\r\n      alert(\"Wrong Password\")\r\n    }\r\n    else {\r\n      //Successful login\r\n\r\n      \r\n      if (userData.IsDefault === 'True') {\r\n        props.onUserAuthenticated(\r\n          //webUserId: userData.WebUserId\r\n          userData\r\n        );\r\n\r\n\r\n\r\n        history.push('/change-password')\r\n      } else {\r\n        console.log(userData.CountyId)\r\n      \r\n        props.onUserAuthenticated(\r\n          //webUserId: userData.WebUserId\r\n          userData\r\n        );\r\n        history.push('/audit-form')\r\n      }\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nreturn (\r\n  <Container component=\"main\" maxWidth=\"xs\">\r\n    <CssBaseline />\r\n    <div className={classes.paper}>\r\n      {/* <Avatar className={classes.avatar}>\r\n        <LockOutlinedIcon />\r\n      </Avatar> */}\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n       Please select your county.\r\n      </Typography>\r\n      {/* <form className={classes.form}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label=\"BOE login name\"\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          onChange={handleEmail}\r\n        />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          onChange={handlePassword}\r\n        />\r\n \r\n        <Button\r\n          type=\"button\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n          onClick={handleLogin}\r\n\r\n        >\r\n          Sign In\r\n        </Button>\r\n        <Grid container justifyContent=\"flex-end\">\r\n          <Grid item type=\"button\" onClick={handleOpen}>\r\n            <Link href=\"#\" variant=\"body2\">\r\n            Forgot password?\r\n            </Link>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </form>  */}\r\n\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-helper-label\">County</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-helper-label\"\r\n          id=\"demo-simple-select-helper\"\r\n          //value={age}\r\n          onChange={handleChange}\r\n        >\r\n               {counties && counties.map((option) => (\r\n                  <MenuItem key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </MenuItem>\r\n                ))}\r\n        </Select>\r\n        <FormHelperText>Please select your county to begin</FormHelperText>\r\n      </FormControl>\r\n\r\n\r\n    </div>\r\n    <Modal\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        // closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper2}>\r\n            <h2 >Forget Password?</h2>\r\n            <p >Please send a help desk ticket to </p>\r\n            <p >HelpRequest.SBOE@ncbse.gov</p>\r\n            <p >to rest your password </p>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    <Box mt={8}>\r\n      <Copyright />\r\n    </Box>\r\n  </Container>\r\n);\r\n}","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from \"axios\";\r\nimport { env } from \"../variables\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://www.ncsbe.gov/\">\r\n        NCSBE\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\n\r\nconst updatePassword = async (webUserId, password) => {\r\n  \r\n  let putbody = {\r\n    \"WebUserId\": webUserId,\r\n    \"UserPassword\": password\r\n  }\r\n  //console.log('updatFunction', putbody);\r\n  const res = await axios.put(`${env.apiUrl}auth/updateWebUser`, putbody);\r\n}\r\n\r\n\r\n\r\nexport default function ChargePassword(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const [newPassword, setNewPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n  const [error, setError] = useState('')\r\n  const [webUserId, setWebUserId] = useState();\r\n\r\n  //setWebUserId(props.userData.WebUserId)\r\n\r\n  const handleNew = (e) => {\r\n    \r\n    if (e.target.value.length< 8){\r\n      setError('Password must have at least 8 characters')\r\n    }else{\r\n      setError('')\r\n      setNewPassword(e.target.value)\r\n    }\r\n    \r\n  }\r\n\r\n  const handleConfirm = (e) => {\r\n    setConfirmPassword(e.target.value)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setWebUserId(props.userData.WebUserId)\r\n\r\n  }, []);\r\n\r\n\r\n  const handleChangePassword = () => {\r\n    //ev.preventDefault()\r\n    \r\n    if (newPassword === undefined){\r\n      \r\n      setError('You must specify a password')\r\n    }\r\n\r\n  \r\n\r\n    if (newPassword === confirmPassword && newPassword.length >=8) {\r\n      //props.onPasswordChanged();\r\n      //console.log(props.userData.WebUserId) \r\n      updatePassword(webUserId, newPassword)\r\n      //alert(\"Passwords Changed, please login with new password\")\r\n      alert(\"Password changed, please login with new password\")\r\n      history.push('/login');\r\n    } else {\r\n      alert(\"Passwords don't match\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Change Password\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"New Password\"\r\n            label=\"New Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n\r\n            autoComplete=\"current-password\"\r\n            onChange={handleNew}\r\n            error ={error}\r\n            helperText ={error}\r\n            \r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"Confirm Password\"\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handleConfirm}\r\n          />\r\n\r\n          <Button\r\n            type=\"button\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={handleChangePassword}\r\n          >\r\n            Change Password\r\n          </Button>\r\n\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\n//BrowserRouter as Router,\r\n//HashRouter as Router,\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useHistory,\r\n  Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport \"./styles.css\";\r\nimport AuditForm from \"./AuditForm\";\r\nimport LoginPage from \"./LoginPage\";\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport Cookies from 'js-cookie';\r\nimport { clearCookiesInterval, setLoginCookies } from './loginCookies';\r\nimport { env } from \"./variables\";\r\n \r\nfunction initUserData (){\r\n  const userDataCookies = Cookies.get('userData')\r\n  return userDataCookies === undefined ? {} : JSON.parse(userDataCookies)\r\n}\r\n\r\nfunction Logout(props) {\r\n  const history = useHistory();\r\n  props.onLogout();\r\n  history.replace('/login');\r\n  return null;\r\n}\r\n\r\nconst App = () => {\r\n  const [userData, setUserData] = useState(initUserData());\r\n  const [countyId, setCountyId] = useState();\r\n  console.log('user data',userData)\r\n\r\n  const handleUserAuthenticated =(userData)=>{\r\n    // console.log(userData);\r\n    setUserData(userData);\r\n    //setLoginCookies(userData);\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    clearCookiesInterval();\r\n    setUserData({});\r\n    Cookies.remove('userData');\r\n  }\r\n\r\n  const handleOnselect = (countyIdValue) =>{\r\n    //setCountyId({CountyId: countyIdValue})\r\n    setUserData({CountyId: countyIdValue})\r\n  }\r\n\r\n  const fileurl = `${env.apiUrl}files/User-Manual.docx`\r\n  //<a href='https://sampleaudit.ncsbe.gov/files/User-Manual.docx' download>User-Manual</a>\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            {/* <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li> */}\r\n            <li>\r\n              {userData.IsDefault === \"False\" && <Link to=\"/audit-form\">Audit Form</Link> }\r\n            </li>\r\n            {/* <li>\r\n              {userData.IsDefault === \"False\"? <Link to=\"/logout\">Logout</Link>:<Link to=\"/login\">Login</Link>}\r\n            </li> */}\r\n            <li>\r\n              {<Link to=\"/\">County Selection</Link> }\r\n            </li>\r\n            <li>\r\n            <a href={`${env.apiUrl}files/User-Manual.docx`} download>User-Manual</a>\r\n            \r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n         \r\n        <Switch>\r\n          <Route exact path=\"/login\">\r\n            <LoginPage onUserAuthenticated = {handleUserAuthenticated} onSelect = {handleOnselect}/>\r\n          </Route>\r\n          <Route exact path=\"/logout\">\r\n            <Logout onLogout={handleLogout} />\r\n          </Route>\r\n          <Route path=\"/change-password\">\r\n            <ChangePassword userData = {userData}/>\r\n          </Route>\r\n          <Route exact path={\"/audit-form\"}  >\r\n            {<AuditForm userData = {userData}/>}\r\n            {/* {userData.IsDefault ? <AuditForm userData = {userData}/> : <Redirect to = '/login'/> } */}\r\n          </Route>\r\n          <Route path= \"/\">\r\n            <LoginPage onUserAuthenticated = {handleUserAuthenticated} onSelect = {handleOnselect} />\r\n          </Route>\r\n        </Switch>\r\n     \r\n       \r\n\r\n      </div>\r\n      </Router>\r\n\r\n      \r\n    \r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from 'react-router-dom'\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n      <HashRouter>\n      <App />\n      </HashRouter>\n,\n  rootElement\n);"],"sourceRoot":""}