{"version":3,"sources":["variables.js","AuditForm/api.js","components/timepicker.js","components/checkboxs.js","components/infoCards.js","components/simplePaper.js","loginCookies.js","AuditForm/AuditForm.js","BallotReconciliation/api.js","BallotReconciliation/BallotReconciliation.js","LoginPage/api.js","LoginPage/LoginPage.js","ChangePassword/ChangePassword.js","App.js","index.js"],"names":["env","apiUrl","addCandidate","postBody","a","console","log","axios","post","res","getdataByCountyandsample","countyId","SampleId","get","response","data","newDateOfCount","String","Date","newTimeOfCount","undefined","DateOfCount","slice","TimeOfCount","CostOfCount","Number","TotalTime","VotingEquipmentUsed","VotingArray","split","newSampleDetail","CountyId","toString","ElectionDate","TypeOfSample","PrecinctSiteName","ContestName","CountyName","HumanOrMachineError","DifferenceExplanation","PeoplePartyCounting","getCandidateByCountyandsample","DatePickers","props","MuiPickersUtilsProvider","utils","DateFnsUtils","Grid","container","justifyContent","id","label","format","value","selectedDate","onChange","onDateChange","KeyboardButtonProps","error","formValidation","helperText","selectedTime","onTimeChange","CheckboxLabels","votingArray","list","FormGroup","row","FormControlLabel","control","Checkbox","checked","includes","onCheckBoxChange","name","color","useStyles","makeStyles","root","border","minWidth","margin","padding","textAlign","align","minHeight","height","title","fontSize","pos","SimpleCard","classes","Card","className","variant","CardContent","Typography","cardName","CardValue","theme","width","marginTop","text","cookieIntervalId","clearCookiesInterval","clearInterval","AuditForm","useState","React","CandidateName1","CandidateName2","sampleDetail","setSampleDetail","showExplanation","editMode","setEditMode","CandidatesCounts","setFormValidation","candidateData","setCandidateData","formInfoSubmitted","setFormInfoSubmitted","label1","label2","label1Color","label2Color","setLabel","storedValueAsNumber","window","localStorage","getItem","isInteger","countyID","setCountyID","getdataByCountyandsampleHandler","getCandidateByCountyandsampleHandler","handleReset","r","confirm","alert","updateCandidate","newData","canId","putbody","put","updateData","objIndex","findIndex","obj","SampleCandidateId","CandidateName","Machine","parseInt","HandToEye","DifferenceInCount","Math","abs","deleteCandidate","delete","updateSample","useEffect","userData","setItem","formControl","spacing","selectEmpty","outerColumn","borderRight","borderBottom","borderLeft","bigTitle","fontWeight","marginBottom","paddingTop","paddingLeft","textBox","formBox","entireForm","paddingRight","paddingBottom","cost","costInput","textField","marginLeft","marginRight","item","RadioGroup","aria-label","e","target","Box","borderColor","borderRadius","component","m","p","pr","pl","Radio","style","xs","alignItems","substring","date","time","NewTime","toLocaleString","timeZone","FormControl","FormLabel","event","updatedList","push","filter","FormHelperText","TextField","InputProps","startAdornment","InputAdornment","position","inputProps","min","max","type","field","editable","search","paging","sorting","actionsColumnIndex","onRowAdd","Promise","resolve","reject","then","onRowUpdate","oldData","onRowDelete","Action","action","icon","disabled","hidden","tooltip","onClick","Button","Container","Collapse","in","timeout","Fade","noValidate","autoComplete","multiline","rows","defaultValue","newFormValidation","length","HandToEyeIsZero","some","MachineIsZero","objs","trueCount","key","labeltochange","catch","message","scrollTo","top","behavior","getVotingDateAPI","getVotingMethodAPI","countyName","votingDate","params","getBallotReconcileDetailAPI","BallotReconciliation","setCountyId","setVotingDate","votingList","countyVotingData","setCountyVotingData","VotingMethod","VotingDateSelected","votingMethod","setVotingMethod","setRows","getDataByVotingDate","results","getVotingDate","updateBallotReconcile","BallotReconcileId","OriginalCount","Spoiled","Provisional","Challenged","Unused","BallotsCast","Comments","previousVotingData","cashedDate","forwardRef","ref","InputLabel","Select","labelId","map","option","MenuItem","icons","Export","columns","cellStyle","maxWidth","headerStyle","validate","rowData","isValid","options","tableLayout","rowStyle","exportButton","exportFileName","getAllCounty","getCountyApps","getAppList","Copyright","Link","href","getFullYear","paper","display","flexDirection","avatar","backgroundColor","palette","secondary","main","form","submit","modal","paper2","background","boxShadow","shadows","LoginPage","selectedCounty","setSelectedCounty","selectedApp","setSelectedApp","counties","setCounties","appLists","setAppLists","history","useHistory","open","setOpen","getAllCountyFromAPI","getAppListFromAPI","respsone","handleCountySelect","appList","CssBaseline","onSelect","Modal","onClose","BackdropComponent","Backdrop","BackdropProps","mt","updatePassword","webUserId","password","ChargePassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","setError","setWebUserId","WebUserId","Avatar","required","fullWidth","Logout","onLogout","replace","App","userDataCookies","Cookies","JSON","parse","initUserData","setUserData","handleUserAuthenticated","handleOnselect","countyIdValue","IsDefault","to","download","exact","path","onUserAuthenticated","remove","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9749c6c9.chunk.js","sourcesContent":["//for testing in local set to same\r\n//for production https://data.ncsbe.gov/\r\n// \r\n\r\n\r\nexport const env = process.env.NODE_ENV === 'production'? {\r\n    // apiUrl: 'https://sampleaudit.ncsbe.gov/'\r\n    apiUrl: 'http://localhost:4001/'\r\n}:{\r\n    apiUrl: 'http://localhost:4001/'\r\n}\r\n\r\n","import { env } from \"../variables\";\r\nimport axios from \"axios\";\r\n//npm run build will be production. \r\n\r\n\r\n export const addCandidate = async (postBody) => {\r\n    //const res = await axios.post(`${process.env.NODE_ENV}addCandidate`, putbody);\r\n    console.log(\"in add candidate\", `${env.apiUrl}sampleAudit/addCandidate`)\r\n\r\n    const res = await axios.post(`${env.apiUrl}sampleAudit/addCandidate`, postBody);\r\n    console.log(res)\r\n    return res\r\n  }\r\n\r\n\r\n\r\n  export const getdataByCountyandsample = async (countyId, SampleId) => {\r\n   \r\n    console.log(countyId, SampleId)\r\n    console.log(`${env.apiUrl}sampleAudit/getDetailByCountySampleId/${countyId}/${SampleId}`)\r\n\r\n    const response = await axios.get(\r\n      `${env.apiUrl}sampleAudit/getDetailByCountySampleId/${countyId}/${SampleId}`\r\n    );\r\n    let data = await response.data;\r\n    console.log('data from api', data)\r\n    let newDateOfCount = String(new Date())\r\n    let newTimeOfCount = String(new Date())\r\n\r\n    if (data.DateOfCount == undefined || data.DateOfCount == null) {\r\n      //console.log ('Not in DB', data.DateOfCount)\r\n      //dateOfCount = dateOfCount.slice(0,-1)\r\n      //console.log(newDateOfCount)\r\n\r\n    } else {\r\n      //console.log ('Yes', data.DateOfCount)\r\n      newDateOfCount = String(data.DateOfCount)\r\n      newDateOfCount = newDateOfCount.slice(0, -1)\r\n    }\r\n\r\n\r\n    if (data.TimeOfCount == undefined || data.TimeOfCount == null) {\r\n      //console.log ('Not in DB', data.TimeOfCount)\r\n      //TimeOfCount = TimeOfCount.slice(0,-1)\r\n      //console.log(newTimeOfCount)\r\n    } else {\r\n      //console.log ('Yes', data.TimeOfCount)\r\n      newTimeOfCount = String(data.TimeOfCount)\r\n      newTimeOfCount = newTimeOfCount.slice(0, -1)\r\n    }\r\n\r\n    const CostOfCount = Number(data.CostOfCount)\r\n    const TotalTime = Number(data.TotalTime)\r\n    console.log('VotingArray', data.VotingEquipmentUsed)\r\n\r\n    \r\n    const VotingArray = data.VotingEquipmentUsed.split(',');\r\n\r\n                             \r\n    let newSampleDetail ={\r\n        CountyId: countyId,\r\n        SampleId: data.SampleId.toString(),  //why to string\r\n        ElectionDate: data.ElectionDate,\r\n        TypeOfSample: data.TypeOfSample,\r\n        PrecinctSiteName: data.PrecinctSiteName,\r\n        ContestName: data.ContestName,\r\n        CountyName: data.CountyName,\r\n        DateOfCount: newDateOfCount,\r\n        TimeOfCount: newTimeOfCount,\r\n        VotingEquipmentUsed: VotingArray,\r\n        HumanOrMachineError: data.HumanOrMachineError,\r\n        DifferenceExplanation: data.DifferenceExplanation,\r\n        PeoplePartyCounting: data.PeoplePartyCounting,\r\n        TotalTime: TotalTime,\r\n        CostOfCount: CostOfCount\r\n    }\r\n\r\n    return newSampleDetail\r\n  };\r\n\r\n\r\n  export const getCandidateByCountyandsample = async (countyId, SampleId) => {\r\n    try {\r\n      const response = await axios.get(`${env.apiUrl}sampleAudit/getCandidateByCountySampleId/${countyId}/${SampleId}`);\r\n      let data = await response.data;\r\n\r\n\r\n      return data\r\n    } catch (error) {\r\n      //console.error(error)\r\n    }\r\n  };\r\n\r\n","import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { parseISO } from 'date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport { convertToLocalTime } from 'date-fns-timezone';\r\n\r\n\r\n\r\n\r\n\r\nexport default function DatePickers(props) {\r\n\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid container justifyContent=\"space-around\">\r\n        <KeyboardDatePicker\r\n          //margin=\"small\"  \r\n          id=\"date-picker-dialog\"\r\n          label=\"Select Date of count\"\r\n          format=\"MM/dd/yyyy\"\r\n          value={props.selectedDate}\r\n          onChange={props.onDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n          error ={props.formValidation.DateOfCount}\r\n          helperText = { props.formValidation.DateOfCount ?'Required':''}\r\n        />\r\n        <KeyboardTimePicker\r\n          //margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Select Time of count\"\r\n          value={props.selectedTime}\r\n          onChange={props.onTimeChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n          error ={props.formValidation.TimeOfCount}\r\n          helperText = { props.formValidation.TimeOfCount ?'Required':''}\r\n        />\r\n\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n\r\n ","import React, { useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nexport default function CheckboxLabels(props) {\r\n//   const [state, setState] = React.useState({\r\n//     id:'3',\r\n//     VotingEquipmentUsed: []\r\n\r\n//   })\r\n  \r\n\r\n//   const handleChange = (event) => {\r\n//     let updatedList = state.VotingEquipmentUsed\r\n//     if (event.target.checked){\r\n//         updatedList.push(event.target.name)\r\n     \r\n//         }\r\n//     else{\r\n//         console.log('false', event.target.name)\r\n//         updatedList = updatedList.filter(e => e !== event.target.name)\r\n//         console.log('updatedList', updatedList)\r\n//     }\r\n    \r\n//     setState({VotingEquipmentUsed: updatedList})\r\n    \r\n//     }\r\n    \r\n//     useEffect(() => {\r\n        \r\n//         console.log('checkboxstate', state.VotingEquipmentUsed)\r\n//       }, [state]);\r\n\r\n// console.log(props.list)\r\n// console.log(typeof(props.list))\r\nconst votingArray = String(props.list).split(',')\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n          \r\n            checked={votingArray.includes(\"M100_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"M100_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"M100 tabulator\"\r\n      />\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"DS200_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"DS200_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"DS200 tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"D650_central_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"D650_central_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"D650 central tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={votingArray.includes(\"DS_850_central_tabulator\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"DS_850_central_tabulator\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"DS 850 central tabulator\"\r\n      />\r\n\r\n    <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n          checked={votingArray.includes(\"Hart Verity\")}\r\n            onChange={props.onCheckBoxChange}\r\n            name=\"Hart Verity\"\r\n            color=\"primary\"\r\n          />\r\n          \r\n        }\r\n        label=\"Hart Verity\"\r\n      />    \r\n    \r\n    </FormGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import { black } from 'material-ui/styles/colors';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    border: `1px solid black`,\r\n    minWidth: 70,\r\n    margin: 0,\r\n    padding:0,\r\n    textAlign: \"center\",\r\n    align: \"center\",\r\n    minHeight: 5,\r\n    height: '100%',\r\n    \r\n\r\n  },\r\n\r\n  title: {\r\n    fontSize: 15,\r\n    margin: 0,\r\n    padding:0,\r\n    \r\n  },\r\n  pos: {\r\n    margin: 0,\r\n    padding:0,\r\n    \r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} >\r\n          {props.cardName}\r\n        </Typography>\r\n\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {props.CardValue || 'N\\A'}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: 'flex',\r\n    width: '100%'\r\n  },\r\n  title:{\r\n    fontSize: 20,\r\n    margin: 1,\r\n    marginTop:10,\r\n    padding:1,\r\n    textAlign: \"center\",\r\n\r\n  },\r\n  text:{\r\n    margin: 10\r\n\r\n  }\r\n}));\r\n\r\nexport default function SimplePaper() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n\r\n      <Paper elevation={1}>\r\n      <Typography className={classes.title} >\r\n          Please Filled Out Following Form \r\n        </Typography>\r\n        <Grid item className={classes.text}>\r\n        Remember that the sample audit count is a test to show that the election equipment worked properly. If the hand count is different than the machine count, that difference must be explained. However, a difference in the count does NOT change election results.\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import Cookies from 'js-cookie';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst hasCookiesExpired =()=> Cookies.get('userData') === undefined;\r\n\r\nlet cookieIntervalId = null;\r\n\r\nexport function clearCookiesInterval() {\r\n  if (cookieIntervalId !== null) {\r\n    clearInterval(cookieIntervalId);\r\n    cookieIntervalId = null;\r\n  }\r\n}\r\n\r\nexport function useLoginCookiesTimer(userData, onOpenAlertDialog) {\r\n  const history = useHistory();\r\n  clearCookiesInterval();\r\n\r\n  cookieIntervalId = setInterval(() => {\r\n    console.log('timer', Cookies.get('userData.Email'))\r\n    if (hasCookiesExpired()) {\r\n      onOpenAlertDialog();\r\n      \r\n    }\r\n  }, 2000)\r\n}\r\n\r\nexport function setLoginCookies(userData) {\r\n  const in30Minutes = 1/48\r\n  const in15Minutes = 1/96\r\n\r\n  const in10Minutes = 1/144\r\n  //console.log('stay', userData)\r\n  Cookies.set('userData', JSON.stringify(userData), {\r\n      expires: in15Minutes\r\n  });\r\n}","import React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Grid, Button, Fade } from \"@material-ui/core\";\r\nimport { alpha } from '@material-ui/core/styles'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { forwardRef } from 'react';\r\n//import Edit from '@material-ui/icons/Edit';\r\nimport Check from '@material-ui/icons/Check';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport { env } from \"../variables\";\r\nimport { addCandidate, getdataByCountyandsample, getCandidateByCountyandsample, handleReset } from \"./api\";\r\n\r\n\r\nimport { AddBox, Edit } from \"@material-ui/icons\";\r\n//import moment from 'moment-timezone';\r\n\r\n//for dialog\r\n// import Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Countdown from 'react-countdown';\r\n\r\n\r\n\r\n//components\r\nimport DatePickers from '../components/timepicker';\r\nimport CheckboxLabels from '../components/checkboxs';\r\nimport Cards from '../components/infoCards';\r\nimport SimplePaper from '../components/simplePaper';\r\nimport { useLoginCookiesTimer, setLoginCookies } from '../loginCookies';\r\nimport AlertDialog from '../components/alertDialog'\r\nimport Cookies from 'js-cookie';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst AuditForm = (props) => {\r\n  const [alertDialog, setAlertDialog] = useState(false)\r\n\r\n  const handleClickOpen = () => {\r\n    setAlertDialog(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAlertDialog(false)\r\n    // setLoginCookies(props.userData)\r\n\r\n\r\n\r\n  };\r\n\r\n  //useLoginCookiesTimer(props.userData, handleClickOpen);\r\n\r\n\r\n\r\n  const emptySampleDetail = {\r\n    CountyId: \"\",\r\n    SampleId: \"\",\r\n    ElectionDate: \"\",\r\n    CountyName: \"\",\r\n    ContestName: \"\",\r\n    TypeOfSample: \"\",\r\n    PrecinctSiteName: \"\",\r\n    CandidateName1: \"\",\r\n    CandidateName2: \"\",\r\n    //to update\r\n    //DateOfCount: new Date(),\r\n    //TimeOfCount: new Date(),\r\n    // VotingEquipmentUsed: [],\r\n    // HumanOrMachineError: \"\",\r\n    // DifferenceExplanation: \"\",\r\n    // PeoplePartyCounting: \"\",\r\n    // TotalTime: \"\",\r\n    // CostOfCount: \"\"\r\n\r\n  }\r\n\r\n\r\n\r\n  const [sampleDetail, setSampleDetail] = React.useState({\r\n    ...emptySampleDetail\r\n  });\r\n\r\n  const [showExplanation, setShowExplanation] = useState(false)\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const [formValidation, setFormValidation] = useState({\r\n    DateOfCount: false,\r\n    TimeOfCount: false,\r\n    VotingEquipmentUsed: false,\r\n    TotalTime: false,\r\n    CostOfCount: false,\r\n    PeoplePartyCounting: false,\r\n    HumanOrMachineError: false,\r\n    DifferenceExplanation: false,\r\n    CandidatesCounts: false,\r\n\r\n  })\r\n\r\n  //  const [radioValue, setRadioValue] = useState('Human')\r\n\r\n  const [selectedSampleId, setSelectedSampleId] = useState('');\r\n\r\n  const [candidateData, setCandidateData] = useState([]);\r\n\r\n\r\n  const [formInfoSubmitted, setFormInfoSubmitted] = useState(false)\r\n\r\n  const [submitButtonLabel, setSubmitButtonLabel] = useState('Submit')\r\n\r\n  const [label, setLabel] = useState({\r\n    label1: \"\",\r\n    label2: \" Done\",\r\n    label1Color: \"warning.main\",\r\n    label2Color: \"warning.main\"\r\n\r\n  })\r\n\r\n\r\n  const storedValueAsNumber = Number(window.localStorage.getItem('countyID'))\r\n\r\n  const [countyID, setCountyID] = useState(\r\n\r\n    Number.isInteger(storedValueAsNumber) ? storedValueAsNumber : 1\r\n  )\r\n\r\n\r\n\r\n\r\n  const getdataByCountyandsampleHandler = async (countyId, SampleId) => {\r\n    let response = await getdataByCountyandsample(countyId, SampleId)\r\n    // setSampleDetail({\r\n    //   ...sampleDetail,\r\n    //   CountyId: countyId,\r\n    //   SampleId: data.SampleId.toString(),\r\n    //   ElectionDate: data.ElectionDate,\r\n    //   TypeOfSample: data.TypeOfSample,\r\n    //   PrecinctSiteName: data.PrecinctSiteName,\r\n    //   ContestName: data.ContestName,\r\n    //   CountyName: data.CountyName,\r\n    //   DateOfCount: newDateOfCount,\r\n    //   TimeOfCount: newTimeOfCount,\r\n    //   VotingEquipmentUsed: VotingArray,\r\n    //   HumanOrMachineError: data.HumanOrMachineError,\r\n    //   DifferenceExplanation: data.DifferenceExplanation,\r\n    //   PeoplePartyCounting: data.PeoplePartyCounting,\r\n    //   TotalTime: TotalTime,\r\n    //   CostOfCount: CostOfCount\r\n    // });\r\n    console.log('Response', response)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      ...response\r\n\r\n    });\r\n  };\r\n\r\n\r\n  const getCandidateByCountyandsampleHandler = async (countyId, SampleId) => {\r\n\r\n    let data = await getCandidateByCountyandsample(countyId, SampleId)\r\n    console.log(candidateData, data)\r\n    setCandidateData(data);\r\n  };\r\n\r\n  const handleReset = async () => {\r\n\r\n    let r = window.confirm(\"Are you sure you want to reset the table?\\n All edited data will be lost!\");\r\n\r\n    let postBody = {\r\n      \"countyId\": sampleDetail.CountyId,\r\n      \"sampleId\": sampleDetail.SampleId\r\n    }\r\n    if (r == true) {\r\n      const res = await axios.post(`${env.apiUrl}sampleAudit/getDefaultCandidateByCountySampleId`, postBody);\r\n\r\n      console.log('executed the stored procedures', res)\r\n      getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId)\r\n\r\n      //setFormValidation({ ...formValidation, CandidatesCounts: true })\r\n\r\n      alert('Please edit the table again.')\r\n\r\n\r\n    } else {\r\n\r\n    }\r\n  };\r\n\r\n  const handleRadioButton = (e) => {\r\n    let CountyId = sampleDetail.CountyId\r\n    let SampleId = e.target.value\r\n    getdataByCountyandsampleHandler(CountyId, SampleId)\r\n    getCandidateByCountyandsampleHandler(CountyId, SampleId);\r\n    setFormValidation({\r\n      DateOfCount: false,\r\n      TimeOfCount: false,\r\n      VotingEquipmentUsed: false,\r\n      TotalTime: false,\r\n      CostOfCount: false,\r\n      PeoplePartyCounting: false,\r\n      HumanOrMachineError: false,\r\n      DifferenceExplanation: false,\r\n      CandidatesCounts: false,\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const updateCandidate = async (newData, canId, putbody) => {\r\n    //console.log('putbody', putbody)\r\n    //console.log('canId', canId)  \r\n    const res = await axios.put(`${env.apiUrl}sampleAudit/updateCandidate`, putbody);\r\n    // console.log(candidateData)\r\n    let updateData = [...candidateData]\r\n    let objIndex = updateData.findIndex((obj => obj.SampleCandidateId == newData.SampleCandidateId));\r\n    updateData[objIndex].CandidateName = newData.CandidateName\r\n    updateData[objIndex].ContestName = newData.ContestName\r\n    updateData[objIndex].Machine = parseInt(newData.Machine)\r\n    updateData[objIndex].HandToEye = parseInt(newData.HandToEye)\r\n    updateData[objIndex].DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n    setCandidateData(updateData)\r\n  }\r\n\r\n\r\n\r\n  const deleteCandidate = async (SampleCandidateId) => {\r\n    //const res = await axios.post(`${process.env.NODE_ENV}addCandidate`, putbody);\r\n    console.log(\"In Delete Candidate\", `${env.apiUrl}sampleAudit/deleteCandidate/${SampleCandidateId}`)\r\n\r\n    const res = await axios.delete(`${env.apiUrl}sampleAudit/deleteCandidate/${SampleCandidateId}`);\r\n    console.log(res)\r\n    return res\r\n\r\n  }\r\n\r\n  const updateSample = async (CountyId, SampleId, putbody) => {\r\n\r\n    console.log(`${env.apiUrl}sampleAudit/updateSample`, putbody)\r\n    const res = await axios.put(`${env.apiUrl}sampleAudit/updateSample`, putbody);\r\n    console.log(res)\r\n\r\n  }\r\n\r\n\r\n\r\n  const hasError = () => {\r\n    let showError = false\r\n    //showExplanation\r\n    if (showExplanation) {\r\n\r\n      let keyList = [\r\n        'DateOfCount',\r\n        'TimeOfCount',\r\n        'VotingEquipmentUsed',\r\n        'TotalTime',\r\n        'CostOfCount',\r\n        'PeoplePartyCounting'\r\n      ]\r\n\r\n      for (var key in keyList) {\r\n        if (formValidation[key]) showError = true;\r\n      }\r\n\r\n    } else {\r\n\r\n      let keyList = [\r\n        'DateOfCount',\r\n        'TimeOfCount',\r\n        'VotingEquipmentUsed',\r\n        'TotalTime',\r\n        'CostOfCount',\r\n        'PeoplePartyCounting',\r\n        'HumanOrMachineError',\r\n        'DifferenceExplanation'\r\n      ]\r\n\r\n      for (var key in keyList) {\r\n        if (formValidation[key]) showError = true;\r\n      }\r\n    }\r\n\r\n    return showError\r\n\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 10,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    console.log('edit mode', editMode)\r\n\r\n    if (editMode) {\r\n      alert(\"You are still editng one candidate record, please save it.\")\r\n      return\r\n    }\r\n\r\n    let newFormValidation = { ...formValidation };\r\n\r\n    //newFormValidation = !sampleDetail.DateOfCount ? { ...newFormValidation, DateOfCount: true } : newFormValidation;\r\n    //newFormValidation = !sampleDetail.TimeOfCount ? { ...newFormValidation, TimeOfCount: true } : newFormValidation;\r\n    newFormValidation = sampleDetail.VotingEquipmentUsed.length === 1 ? { ...newFormValidation, VotingEquipmentUsed: true } : newFormValidation;\r\n    newFormValidation = showExplanation && !sampleDetail.HumanOrMachineError ? { ...newFormValidation, HumanOrMachineError: true } : newFormValidation;\r\n    newFormValidation = showExplanation && !sampleDetail.DifferenceExplanation ? { ...newFormValidation, DifferenceExplanation: true } : newFormValidation;\r\n    newFormValidation = !sampleDetail.PeoplePartyCounting ? { ...newFormValidation, PeoplePartyCounting: true } : newFormValidation;\r\n    //newFormValidation = !sampleDetail.CostOfCount ? { ...newFormValidation, CostOfCount: true } : newFormValidation;\r\n    newFormValidation = !sampleDetail.TotalTime ? { ...newFormValidation, TotalTime: true } : newFormValidation;\r\n\r\n    let HandToEyeIsZero = candidateData.some(obj => obj.HandToEye != 0)\r\n    let MachineIsZero = candidateData.some(objs => objs.Machine != 0)\r\n\r\n\r\n    newFormValidation = !HandToEyeIsZero && !MachineIsZero ? { ...newFormValidation, CandidatesCounts: true } : newFormValidation;\r\n\r\n    setFormValidation(newFormValidation)\r\n\r\n    // if sampleDetail.DateOfCount \r\n\r\n    //loop throuh every properties in the obj\r\n    //console.log('sampleDetail', sampleDetail)\r\n    //console.log('validation object', newFormValidation)\r\n    let trueCount = 0\r\n\r\n    for (var key in newFormValidation) {\r\n      if (newFormValidation[key]) {\r\n        trueCount += 1\r\n      }\r\n    }\r\n\r\n    //trueCount== 0\r\n    if (trueCount == 0) {\r\n      //console.log(sampleDetail.SampleId)\r\n      var labeltochange = 'label' + sampleDetail.SampleId + \"Color\"\r\n      //console.log(labeltochange)\r\n      //use square bracket we can pass in string \r\n      setLabel({ ...label, [labeltochange]: \"success.main\" })\r\n\r\n\r\n\r\n      updateSample(sampleDetail.CountyId, sampleDetail.SampleId, sampleDetail)\r\n        .then(response => {\r\n          //console.log(response)\r\n          setFormInfoSubmitted(false);\r\n        })\r\n        .catch(error => {\r\n          //console.log(error)\r\n        })\r\n\r\n      let message = \"Sample \" + sampleDetail.SampleId + \" submitted\"\r\n\r\n      alert(message);\r\n\r\n      scrollToTop();\r\n\r\n\r\n    } else {\r\n      alert(\"Please fill all required cells\")\r\n\r\n\r\n      setFormInfoSubmitted(false)\r\n\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  var title = <h1>Sample Audit Record</h1>;\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Candidate\", field: \"CandidateName\",\r\n\r\n\r\n    },\r\n    {\r\n      title: \"Contest Name\", field: \"ContestName\",\r\n\r\n\r\n    },\r\n    {\r\n      title: \"Machine\", field: \"Machine\", type: \"numeric\",\r\n\r\n\r\n    },\r\n    {\r\n      title: \"Hand-To-Eye\", field: \"HandToEye\", type: \"numeric\",\r\n      //validate: rowData => rowData.year === undefined || rowData.year === \"\" ? \"Required\" : true\r\n      //helperText:'Invalid Email'\r\n\r\n    },\r\n    {\r\n      title: \"Difference In Count\", field: 'DifferenceInCount', editable: 'never', type: \"numeric\",\r\n      //validate: rowData => rowData.fee === undefined || rowData.fee === \"\" ? \"Required\" : true\r\n    }]\r\n\r\n  const tableIcons = {\r\n    // Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),   \r\n    // Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    // Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    // Check: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\r\n\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n\r\n    // newDateOfCount = String(data.DateOfCount)\r\n    // newDateOfCount = newDateOfCount.slice(0,-1)\r\n\r\n\r\n    date = String(date)\r\n    date = date.slice(0, -1)\r\n\r\n    //console.log('data of count', date)\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      DateOfCount: date\r\n\r\n    })\r\n    setFormValidation({ ...formValidation, DateOfCount: false })\r\n  }\r\n\r\n  const handleTimeChange = (time) => {\r\n\r\n    //console.log('OG time of count', time)\r\n\r\n    //console.log('dateChange', date)\r\n    const NewTime = time.toLocaleString('en-US', { timeZone: 'America/New_York' })\r\n    //console.log('NewTime', NewTime)\r\n\r\n\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      TimeOfCount: NewTime\r\n\r\n    })\r\n    setFormValidation({ ...formValidation, TimeOfCount: false })\r\n  }\r\n\r\n\r\n\r\n  //cutom function component\r\n  //react component starts with cap\r\n  const NewButton = (props)=>{\r\n    return \"newButton\"\r\n\r\n  }\r\n\r\n  const handleCheckbox = (event) => {\r\n\r\n    let updatedList = sampleDetail.VotingEquipmentUsed;\r\n\r\n\r\n\r\n    if (event.target.checked) {\r\n      updatedList.push(event.target.name)\r\n    }\r\n    else {\r\n      updatedList = updatedList.filter(e => e !== event.target.name)\r\n    }\r\n\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      VotingEquipmentUsed: updatedList\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, VotingEquipmentUsed: false })\r\n\r\n  }\r\n\r\n\r\n  const handleHourInput = (e) => {\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      TotalTime: e.target.value\r\n    })\r\n    setFormValidation({ ...formValidation, TotalTime: false })\r\n  }\r\n\r\n  const handleCostInput = (e) => {\r\n    console.log('costhandle', e.target.value)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      CostOfCount: e.target.value\r\n    })\r\n    setFormValidation({ ...formValidation, CostOfCount: false })\r\n  }\r\n\r\n  const handleRadio = (e) => {\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      HumanOrMachineError: e.target.value\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, HumanOrMachineError: false })\r\n\r\n  }\r\n\r\n\r\n  const handleExplanation = (e) => {\r\n    console.log(e.target.value)\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      DifferenceExplanation: e.target.value\r\n    })\r\n\r\n    setFormValidation({ ...formValidation, DifferenceExplanation: false })\r\n\r\n  }\r\n\r\n  const handlePeople = (e) => {\r\n    console.log('people value', e.target.value)\r\n    setFormValidation({ ...formValidation, PeoplePartyCounting: false })\r\n    setSampleDetail({\r\n      ...sampleDetail,\r\n      PeoplePartyCounting: e.target.value\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n\r\n    console.log('from first useeffect', props.userData.CountyId)\r\n\r\n    props.userData.CountyId ? setCountyID(props.userData.CountyId) : setCountyID(Number(window.localStorage.getItem('countyID')))\r\n\r\n    //setCountyID(props.userData.CountyId)\r\n    //setCountyID(JSON.parse(window.localStorage.getItem('countyID')));\r\n\r\n\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(candidateData)\r\n  //   console.log(candidateData[0].DifferenceInCount)\r\n  //   let DifferenceList = candidateData.map(a => a.DifferenceInCount);\r\n  //   let hasDifference = DifferenceList.some(item => item !== 0)\r\n\r\n\r\n  //   hasDifference ? setShowExplanation(true) : setShowExplanation(false)\r\n\r\n\r\n  // }, [candidateData]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    // console.log(props.userData)\r\n    // console.log(props.userData.CountyId)\r\n    //let countyID = props.userData.CountyId;\r\n    //setCountyID(props.userData.CountyId)\r\n    //localStorage.setItem(\"count\", String(count))\r\n    window.localStorage.setItem('countyID', countyID);\r\n    console.log('from state ', countyID)\r\n    let SampleId = 1\r\n    getdataByCountyandsampleHandler(countyID, SampleId);\r\n    getCandidateByCountyandsampleHandler(countyID, SampleId);\r\n    //console.log(sampleDetail.SampleId)\r\n  }, [countyID]);\r\n\r\n\r\n  // React.useEffect(() => {\r\n  //   setCountyID(JSON.parse(window.localStorage.getItem('countyID')));\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   window.localStorage.setItem('countyID', countyID);\r\n  // }, [countyID]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //Style\r\n  const useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    outerColumn: {\r\n      borderRight: \"1px solid grey\",\r\n      borderBottom: \"1px solid grey\",\r\n      borderLeft: \"1px solid grey\"\r\n    },\r\n    bigTitle: {\r\n      textAlign: \"center\",\r\n      fontSize: 30,\r\n      color: \"blue\",\r\n      fontWeight: 800,\r\n      margin: 5,\r\n      padding: 5,\r\n    },\r\n    title: {\r\n      textAlign: \"center\",\r\n      fontSize: 15,\r\n      color: \"blue\",\r\n      fontWeight: 600,\r\n      margin: 0,\r\n      marginBottom: 5,\r\n      padding: 0,\r\n    },\r\n    error: {\r\n      textAlign: \"center\",\r\n      fontSize: 18,\r\n      color: \"red\",\r\n      fontWeight: 600,\r\n      margin: 0,\r\n      marginBottom: 5,\r\n      padding: 0,\r\n    },\r\n    text: {\r\n      //textAlign: \"left\",\r\n      fontSize: 13,\r\n      color: \"blue\",\r\n      fontWeight: 500,\r\n      //margin: 1,\r\n      //marginBottom: 5,\r\n      paddingTop: 10,\r\n      paddingLeft: 50\r\n    },\r\n    textBox: {\r\n      paddingTop: 6,\r\n      '& .MuiTextField-root': {\r\n        margin: theme.spacing(0),\r\n        width: '100%',\r\n      },\r\n\r\n    },\r\n    formBox: {\r\n      border: \"1px solid grey\",\r\n      // margin: 20\r\n\r\n    },\r\n    entireForm: {\r\n      paddingTop: 30,\r\n      paddingLeft: '10%',\r\n      paddingRight: '10%',\r\n      paddingBottom: 50,\r\n    },\r\n    VotingEquipmentUsed: {\r\n      paddingLeft: 15\r\n\r\n    },\r\n    cost: {\r\n      padding: 15,\r\n\r\n\r\n    },\r\n    costInput: {\r\n      paddingLeft: 30\r\n\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      '& p': {\r\n        color: 'red',\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  const defaultProps = {\r\n    bgcolor: 'background.paper',\r\n    // color: 'blue',\r\n    m: 1,\r\n    style: { width: '80%', height: \"15vw\" },\r\n    borderColor: 'text.primary',\r\n  };\r\n\r\n\r\n\r\n  const renderer = ({ seconds }) => {\r\n    return (\r\n      <span>\r\n        Automatically logout in {seconds} Seconds.\r\n      </span>\r\n    )\r\n  };\r\n\r\n\r\n\r\n  const clickFunction = () => {\r\n    console.log('API URL', `${process.env.REACT_APP_API}addCandidate`)\r\n\r\n    // console.log('sampleDetail Clicked', sampleDetail)\r\n    console.log('candidateData', candidateData)\r\n\r\n    //console.log('sampleDetail.CostOfCount', sampleDetail.CostOfCount)\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <Grid>\r\n\r\n      <Grid container className={classes.entireForm} spacing={2} >\r\n\r\n\r\n        <Grid container item justifyContent='center' >\r\n          {title}\r\n\r\n          {/* <button onClick={handleClickOpen}> click</button> */}\r\n\r\n          {/* <button onClick={clickFunction}> click2</button> */}\r\n\r\n\r\n\r\n\r\n          {/* <AlertDialog open={alertDialog} userData={props.userData} handleClose={handleClose} /> */}\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justifyContent='center' spacing={1}>\r\n          {/* <FormControl component=\"fieldset\"> */}\r\n          {/* <FormLabel component=\"legend\">Sample</FormLabel> */}\r\n          {/* <Grid item xs={3}>Sample</Grid> */}\r\n          {/* <RadioGroup aria-label=\"gender\" name=\"gender1\" value={sampleDetail.SampleId} onChange={handleRadioButton}> */}\r\n          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={sampleDetail.SampleId} onChange={handleRadioButton} row>\r\n            {/* <Grid item ><FormControlLabel value='1' control={<Radio />} label=\"Sample One\" /></Grid> */}\r\n            <Box border={3} borderColor={label.label1Color} borderRadius={16} component=\"span\" m={1} p={0} pr={1} pl={1}>\r\n              <FormControlLabel value='1' control={<Radio />} label={<span style={{ fontSize: '120%' }}>Sample One</span>} />\r\n\r\n            </Box>\r\n\r\n            <Box border={3} borderColor={label.label2Color} borderRadius={16} component=\"span\" m={1} p={0} pr={1} pl={1}>\r\n              <FormControlLabel value='2' control={<Radio />} label={<span style={{ fontSize: '120%' }}>Sample Two</span>} />\r\n            </Box>\r\n\r\n          </RadioGroup>\r\n          {/* </FormControl> */}\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n\r\n      {sampleDetail.PrecinctSiteName === 'not enough samples' ?\r\n        <Grid item xs={12} className={classes.bigTitle}>\r\n          Not enough samples\r\n        </Grid>\r\n        :\r\n\r\n        //{ true &&\r\n\r\n\r\n        <Grid container className={classes.entireForm} spacing={2} >\r\n          <Grid container item spacing={0} justifyContent='space-between' alignItems='stretch'>\r\n\r\n            <Grid item xs >\r\n              <Cards cardName={'County'} CardValue={sampleDetail.CountyName} />\r\n            </Grid>\r\n\r\n            <Grid item xs >\r\n              <Cards cardName={'Election Date'} CardValue={sampleDetail.ElectionDate.toString().substring(0, 10)} />\r\n            </Grid>\r\n            {/* <Grid item xs >\r\n  <Cards cardName={'Contest Name'} CardValue={sampleDetail.ContestName} />\r\n  </Grid> */}\r\n            <Grid item xs >\r\n              <Cards cardName={'Type Of Sample'} CardValue={sampleDetail.TypeOfSample} />\r\n            </Grid>\r\n            <Grid item xs >\r\n              <Cards cardName={'Site Name'} CardValue={sampleDetail.PrecinctSiteName} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n          {/* <Grid container item spacing={10} justifyContent='center'>\r\n<Grid item xs={12} spacing={10}>\r\n  <SimplePaper></SimplePaper>\r\n</Grid>\r\n</Grid> */}\r\n\r\n          {/* form starts here */}\r\n          <Grid container item spacing={0} justifyContent='center'>\r\n\r\n\r\n            <Box border={1} padding={2}>\r\n              <Grid container spacing={2} justifyContent='center'>\r\n                <Grid item xs={12} className={classes.bigTitle}>\r\n                  Sample Audit Form\r\n                </Grid>\r\n\r\n                <Grid container item xs={12}>\r\n\r\n\r\n                  <Grid item xs={6} style={{ border: \"1px solid grey\" }}>\r\n                    <Typography className={classes.title}>Select date and time</Typography>\r\n                    <DatePickers onDateChange={handleDateChange} onTimeChange={handleTimeChange}\r\n                      selectedDate={sampleDetail.DateOfCount} selectedTime={sampleDetail.TimeOfCount}\r\n                      formValidation={formValidation} />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6} className={classes.VotingEquipmentUsed} style={{ border: \"1px solid grey\" }}>\r\n                    <FormControl error={formValidation.VotingEquipmentUsed}>\r\n                      <FormLabel ><Typography className={classes.title}>Voting equipment used for this sample</Typography></FormLabel>\r\n\r\n                      <CheckboxLabels\r\n                        onCheckBoxChange={handleCheckbox}\r\n                        list={sampleDetail.VotingEquipmentUsed}>\r\n                      </CheckboxLabels>\r\n\r\n                      <FormHelperText>{formValidation.VotingEquipmentUsed ? 'Required' : ''}</FormHelperText>\r\n                    </FormControl>\r\n\r\n\r\n                  </Grid>\r\n\r\n                  <Grid container item xs={6} style={{ border: \"1px solid grey\" }} className={classes.cost} >\r\n                    <Grid item>\r\n                      <Typography className={classes.title}>Time necessary to complete this count (not BOTH counts)</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item className={classes.costInput}>\r\n                      <TextField\r\n                        InputProps={{\r\n                          startAdornment: <InputAdornment position=\"start\">Hr</InputAdornment>,\r\n                          inputProps: { min: 0, max: 30 },\r\n                        }}\r\n                        //required\r\n                        type=\"number\"\r\n                        id=\"filled-required\"\r\n                        value={sampleDetail.TotalTime}\r\n\r\n\r\n                        //variant=\"filled\"\r\n                        onChange={handleHourInput}\r\n                        error={formValidation.TotalTime}\r\n                        helperText={formValidation.TotalTime ? 'Required' : ''}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid container item xs={6} style={{ border: \"1px solid grey\" }} className={classes.cost} >\r\n                    <Grid item className={classes.title}>\r\n                      <Typography className={classes.title}> Cost or estimated cost of this count (not BOTH counts)</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item className={classes.costInput}  >\r\n                      <TextField\r\n                        InputProps={{\r\n                          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                          inputProps: { min: 0, max: 99999 },\r\n                        }}\r\n                        //required\r\n                        type=\"number\"\r\n                        id=\"filled-required\"\r\n\r\n                        value={sampleDetail.CostOfCount}\r\n\r\n                        //variant=\"filled\"\r\n                        onChange={handleCostInput}\r\n                      // error={formValidation.CostOfCount}\r\n                      // helperText={formValidation.CostOfCount ? 'Required' : ''}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n\r\n\r\n                  <MaterialTable\r\n                    title=\"Enter counts for each candidates\"\r\n                    title={formValidation.CandidatesCounts ?\r\n                      <Typography className={classes.error}>Please make sure all candidate counts have been entered correctly.</Typography>\r\n                      : \"Enter counts for each candidates\"}\r\n                    columns={columns}\r\n                    data={candidateData}\r\n                    // icons={tableIcons} //table icons are imported in index.html\r\n\r\n                    options={{\r\n                      search: false,\r\n                      paging: false,\r\n                      sorting: false,\r\n                      actionsColumnIndex: -1,\r\n\r\n                    }}\r\n\r\n                    style={formValidation.CandidatesCounts && { border: '2px solid red' }}\r\n\r\n\r\n\r\n                    editable={{\r\n\r\n                      onRowAdd: (newData) =>\r\n                        new Promise((resolve, reject) => {\r\n                          let DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n\r\n                          console.log(sampleDetail)\r\n\r\n                          let postBody = {\r\n                            \"CountyId\": sampleDetail.CountyId,\r\n                            \"SampleId\": sampleDetail.SampleId,\r\n                            \"CandidateName\": newData.CandidateName || 'Please provide valid candidate name',\r\n                            \"Machine\": newData.Machine || 0,\r\n                            \"HandToEye\": newData.HandToEye || 0,\r\n                            \"DifferenceInCount\": DifferenceInCount || 0\r\n                          }\r\n                          addCandidate(postBody).then(response => {\r\n\r\n                            getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId).then(() => {\r\n                              resolve()\r\n\r\n                            })\r\n\r\n                          });\r\n\r\n\r\n                        }),\r\n\r\n\r\n                      onRowUpdate:\r\n\r\n                        (newData, oldData) => new Promise((resolve, reject) => {\r\n\r\n\r\n                          setFormValidation({ ...formValidation, CandidatesCounts: false })\r\n                          //Backend call\r\n                          let canId = oldData.SampleCandidateId\r\n                          //let putbody = JSON.stringify(newData)\r\n\r\n                          let DifferenceInCount = Math.abs(parseInt(newData.Machine) - parseInt(newData.HandToEye))\r\n                          // DifferenceInCount == 0 ? setShowExplanation('none') : setShowExplanation('block');\r\n\r\n                          let putbody = {\r\n                            \"SampleCandidateId\": newData.SampleCandidateId,\r\n                            \"CandidateName\": newData.CandidateName,\r\n                            \"ContestName\": newData.ContestName,\r\n                            \"Machine\": newData.Machine,\r\n                            \"HandToEye\": newData.HandToEye,\r\n                            \"DifferenceInCount\": DifferenceInCount\r\n                          }\r\n\r\n                          //console.log(putbody);\r\n                          //Promise.then() takes two arguments, a callback for success and another for failure.\r\n                          //Both are optional, so you can add a callback for success or failure only.\r\n                          // here response can be any word \r\n                          updateCandidate(newData, canId, putbody).then(response => {\r\n                            //console.log(response)\r\n                            resolve()\r\n                          });\r\n\r\n                          // axios.put(`https://sampleaudit.ncsbe.gov/updateCandidate/${canId}`, putbody)\r\n                          // .then((response, rejct) => {\r\n                          //   let updateDate = candidateData\r\n                          //   let objIndex = updateDate.findIndex(( obj => obj.CandidateId == newData.CandidateId));     \r\n                          //   updateDate[objIndex].Machine = newData.Machine\r\n                          //   updateDate[objIndex].HandToEye = newData.HandToEye\r\n                          //   updateDate[objIndex].DifferenceInCount = newData.DifferenceInCount\r\n                          //   setCandidateData(updateDate)\r\n\r\n                          // resolve()\r\n\r\n                          // });\r\n                          // //why resolve here. will not wait for axios and we since it is a promise we need to excute the resolce. \r\n                          // or we can do somthing like resolve('done') but we don't know what material table is going to do with this resolve. \r\n\r\n                          // //resolve()\r\n                        }),\r\n\r\n                      onRowDelete: oldData =>\r\n                        new Promise(resolve => {\r\n                          let SampleCandidateId = oldData.SampleCandidateId\r\n                          console.log(SampleCandidateId)\r\n\r\n                          deleteCandidate(SampleCandidateId).then(response => {\r\n                            console.log('oldData', oldData)\r\n                            console.log('sampleDetail.CountyId', sampleDetail.CountyId)\r\n\r\n                            getCandidateByCountyandsampleHandler(sampleDetail.CountyId, sampleDetail.SampleId).then(() => {\r\n                              resolve()\r\n                            })\r\n\r\n\r\n                          })\r\n\r\n\r\n                        }),\r\n\r\n\r\n                    }}\r\n\r\n                    components={{\r\n                      //Action: NewButton\r\n                      Action: (props) => {\r\n                        \r\n                        const action =\r\n                          typeof props.action === \"function\" ? props.action() : props.action;\r\n                          //console.log(props.action, action)\r\n\r\n                        return (\r\n                          <action.icon\r\n                            disabled={action.disabled}\r\n                            hidden={action.hidden}\r\n                            tooltip={action.tooltip}\r\n                            onClick={(event) => {\r\n                              console.log('from action', action.tooltip);\r\n                              setEditMode(\r\n                                action.tooltip === \"Edit\" ||\r\n                                action.tooltip === \"Add\" ||\r\n                                action.tooltip === \"Delete\"\r\n                              );\r\n                              action.onClick(event, props.data);\r\n                            }}\r\n                          />\r\n                        );\r\n                      }\r\n                    }}\r\n\r\n\r\n                  />\r\n\r\n                  <Grid item spacing={12} justifyContent='center'>\r\n                    <br />\r\n                    <Button variant=\"contained\" color=\"secondary\"\r\n\r\n\r\n                      onClick={handleReset}\r\n                    >\r\n                      Reset Table\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid Container item xs={12} justifyContent='center' spacing={5}>\r\n                  {/* <Collapse in={showExplanation} timeout={1500}>\r\n        <Fade in={showExplanation} timeout={500}> */}\r\n\r\n                  <Collapse in={true} timeout={1000} justifyContent='center'>\r\n                    <Fade in={true} timeout={1000} justifyContent='center'>\r\n\r\n                      <Grid container justifyContent='center'\r\n                        style={formValidation.DifferenceExplanation && { border: '2px solid red' }}>\r\n                        <Grid item className={classes.title}>\r\n                          <Typography className={classes.title}>Explanation of any difference (skip this section if there was no difference in any totals)</Typography>\r\n                          {/* error={formValidation.PeoplePartyCounting}\r\n          helperText={formValidation.PeoplePartyCounting ? 'Required' : ' '} */}\r\n                        </Grid>\r\n\r\n\r\n                        <Grid container item xs={12} justifyContent='center' style={{ border: \"1px solid grey\" }} >\r\n                          <Grid item xs={8} className={classes.text} justifyContent='center'>\r\n                            <Typography className={classes.title}>If there is a difference, is it attributable to machine error or human error?</Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={4} justifyContent='center'>\r\n                            <RadioGroup row onChange={handleRadio} value={String(sampleDetail.HumanOrMachineError)}>\r\n\r\n                              <FormControlLabel value=\"Machine\" control={<Radio />} label=\"Machine error\" />\r\n                              <FormControlLabel value=\"Human\" control={<Radio />} label=\"Human error\" />\r\n                            </RadioGroup>\r\n                          </Grid>\r\n                        </Grid>\r\n\r\n\r\n\r\n                        <Grid item xs={12} className={classes.textBox}>\r\n\r\n                          <Grid item xs={12} className={classes.title}>\r\n                            <Typography className={classes.title}>Detailed explanation of what caused the difference</Typography>\r\n\r\n                          </Grid>\r\n                          <form noValidate autoComplete=\"on\">\r\n\r\n                            <TextField\r\n                              id=\"outlined-multiline-static\"\r\n                              // label=\"Detailed explanation of what caused the difference\"\r\n                              multiline\r\n                              rows={5}\r\n                              value={sampleDetail.DifferenceExplanation}\r\n                              defaultValue=''\r\n                              variant=\"outlined\"\r\n                              onChange={handleExplanation}\r\n                            />\r\n\r\n                          </form>\r\n                        </Grid>\r\n\r\n                      </Grid>\r\n                    </Fade>\r\n                  </Collapse>\r\n                </Grid>\r\n\r\n                <Grid Container item xs={12} justifyContent='center' spacing={5}>\r\n\r\n                  <Grid item xs={12} className={classes.title}>\r\n                    <Typography className={classes.title}>Who conducted the count (must consist of multiple persons of different party affiliation)</Typography>\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} className={classes.textBox}>\r\n                    <TextField\r\n\r\n                      id=\"outlined-multiline-static\"\r\n                      //label=\"Name, Party affiliation;\"\r\n                      multiline\r\n                      rows={5}\r\n                      //defaultValue={sampleDetail.PeoplePartyCounting}\r\n                      value={sampleDetail.PeoplePartyCounting}\r\n                      variant=\"outlined\"\r\n                      onChange={handlePeople}\r\n\r\n\r\n                      //className={classes.textField}\r\n                      error={formValidation.PeoplePartyCounting}\r\n                      helperText={formValidation.PeoplePartyCounting ? 'Required' : ' '}\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n                {/* <Collapse in={hasError()} timeout={1500}>\r\n      <Fade in={hasError()} timeout={500}>\r\n        <Grid container item xs={12} justifyContent='center' >\r\n          Please filled out required\r\n        </Grid>\r\n      </Fade>\r\n    </Collapse> */}\r\n\r\n                <Grid item spacing={12} justifyContent='center'>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={handleSubmit}\r\n                    disabled={formInfoSubmitted}\r\n                  >\r\n                    {\r\n                      (formInfoSubmitted && 'Your form is submitted!')\r\n                      || (!formInfoSubmitted && 'Submit')\r\n\r\n                    }\r\n                  </Button>\r\n                </Grid>\r\n\r\n              </Grid>\r\n\r\n            </Box>\r\n\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      }\r\n\r\n\r\n\r\n    </Grid>\r\n\r\n  );\r\n};\r\n\r\nexport default AuditForm;\r\n","import { env } from \"../variables\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nexport const getDetailByCountyIdAPI = async (countyId) => {\r\n    try {\r\n      const response = await axios.get(`${env.apiUrl}ballotReconcile/getBRDetail/${countyId}`);\r\n      let data = await response.data;\r\n\r\n\r\n      return data\r\n    } catch (error) {\r\n      //console.error(error)\r\n    }\r\n  };\r\n\r\n\r\n\r\n  export const getVotingDateAPI = async (countyId) => {\r\n    try {\r\n      const response = await axios.get(`${env.apiUrl}ballotReconcile/getVotingDate/${countyId}`);\r\n      let data = await response.data;\r\n\r\n\r\n      return data\r\n    } catch (error) {\r\n      //console.error(error)\r\n    }\r\n  };\r\n\r\n\r\n  export const getVotingMethodAPI = async (countyName, votingDate) =>{\r\n    try {\r\n\r\n      let params =  {\r\n        countyName:countyName,\r\n        votingDate:votingDate\r\n      }\r\n      const response = await axios.get(`${env.apiUrl}ballotReconcile/getVotingMethod`, {params});\r\n\r\n      \r\n      return response.data\r\n      \r\n    } catch (error) {\r\n      console.error(error)\r\n      \r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  export const getBallotReconcileDetailAPI = async (countyName, votingDate) =>{\r\n    try {\r\n\r\n      let params =  {\r\n        countyName:countyName,\r\n        votingDate:votingDate\r\n      }\r\n\r\n      const response = await axios.get(`${env.apiUrl}ballotReconcile/getballotReconcileDetail`, {params});\r\n\r\n      return response.data\r\n      \r\n    } catch (error) {\r\n      console.error(error)\r\n      \r\n    }\r\n\r\n\r\n  }","import React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Grid, Fade } from \"@material-ui/core\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Cards from '../components/infoCards';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MaterialTable from \"material-table\";\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\n\r\n// import { DataGrid, GridToolbarContainer, GridToolbarExport } from '@mui/x-data-grid';\r\n// import { useDemoData } from '@mui/x-data-grid-generator';\r\n\r\nimport { env } from \"../variables\";\r\n\r\n//import api\r\nimport { getDetailByCountyIdAPI, getVotingDateAPI, getVotingMethodAPI, getBallotReconcileDetailAPI } from \"./api\";\r\n\r\n\r\n//for icon\r\nimport { forwardRef } from 'react';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\n//import Export from '@material-ui/icons/Export';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\n\r\nconst BallotReconciliation = (props) => {\r\n\r\n    const emptyBRDetail = {\r\n        CountyId: \"\",\r\n        SampleId: \"\",\r\n        ElectionDate: \"\",\r\n        CountyName: \"\",\r\n        ContestName: \"\",\r\n        TypeOfSample: \"\",\r\n        PrecinctSiteName: \"\",\r\n        CandidateName1: \"\",\r\n        CandidateName2: \"\",\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const emptyVotingDate = {\r\n        CountyName: \"\",\r\n        votingList: []\r\n    }\r\n\r\n\r\n    const [countyId, setCountyId] = React.useState();\r\n\r\n    const [votingDate, setVotingDate] = React.useState();\r\n\r\n    const [bRDetail, setBRDetail] = React.useState();\r\n\r\n    const [countyVotingData, setCountyVotingData] = React.useState({\r\n        ...emptyVotingDate\r\n    });\r\n\r\n    const emptyVotingMethod = {\r\n        VotingMethod: \"N/A\",\r\n        ElectionDate: \"N/A\",\r\n        VotingDateSelected: \"\",\r\n\r\n    }\r\n\r\n    const [votingMethod, setVotingMethod] = React.useState(\r\n        { ...emptyVotingMethod }\r\n    )\r\n\r\n\r\n    const [rows, setRows] = React.useState();\r\n\r\n    const title = <h1>Ballot Reconciliation Reporting</h1>;\r\n    // functions\r\n\r\n\r\n    const getDataByVotingDate = (selectedDate) => {\r\n        console.log('in function', selectedDate)\r\n        let countyName = countyVotingData.CountyName\r\n\r\n        console.log('in function', countyName)\r\n        \r\n\r\n\r\n\r\n        if (countyName && selectedDate) {\r\n            getVotingMethodAPI(countyName, selectedDate).then((results) => {\r\n                results.VotingDateSelected = selectedDate\r\n\r\n                setVotingMethod(results)\r\n\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n\r\n            getBallotReconcileDetailAPI(countyName, selectedDate).then((results) => {\r\n\r\n                setRows(results)\r\n\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n\r\n\r\n\r\n        } else {\r\n            console.log('invalid parameter')\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleDateSelect = (e) => {\r\n\r\n        setVotingDate(e.target.value)\r\n\r\n        window.localStorage.setItem('votingDate', e.target.value);\r\n\r\n        getDataByVotingDate(e.target.value)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //Style\r\n    const useStyles = makeStyles((theme) => ({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        outerColumn: {\r\n            borderRight: \"1px solid grey\",\r\n            borderBottom: \"1px solid grey\",\r\n            borderLeft: \"1px solid grey\"\r\n        },\r\n        bigTitle: {\r\n            textAlign: \"center\",\r\n            fontSize: 30,\r\n            color: \"blue\",\r\n            fontWeight: 800,\r\n            margin: 5,\r\n            padding: 5,\r\n        },\r\n        title: {\r\n            textAlign: \"center\",\r\n            fontSize: 15,\r\n            color: \"blue\",\r\n            fontWeight: 600,\r\n            margin: 0,\r\n            marginBottom: 5,\r\n            padding: 0,\r\n        },\r\n        error: {\r\n            textAlign: \"center\",\r\n            fontSize: 18,\r\n            color: \"red\",\r\n            fontWeight: 600,\r\n            margin: 0,\r\n            marginBottom: 5,\r\n            padding: 0,\r\n        },\r\n        text: {\r\n            //textAlign: \"left\",\r\n            fontSize: 13,\r\n            color: \"blue\",\r\n            fontWeight: 500,\r\n            //margin: 1,\r\n            //marginBottom: 5,\r\n            paddingTop: 10,\r\n            paddingLeft: 50\r\n        },\r\n        textBox: {\r\n            paddingTop: 6,\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(0),\r\n                width: '100%',\r\n            },\r\n\r\n        },\r\n        formBox: {\r\n            border: \"1px solid grey\",\r\n            // margin: 20\r\n\r\n        },\r\n        entireForm: {\r\n            paddingTop: 30,\r\n            paddingLeft: '5%',\r\n            paddingRight: '5%',\r\n            paddingBottom: 50,\r\n        },\r\n        VotingEquipmentUsed: {\r\n            paddingLeft: 15\r\n\r\n        },\r\n        cost: {\r\n            padding: 15,\r\n\r\n\r\n        },\r\n        costInput: {\r\n            paddingLeft: 30\r\n\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: 200,\r\n            '& p': {\r\n                color: 'red',\r\n            },\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    const getDetailByCountyId = async (countyId) => {\r\n        //console.log(props.userData.CountyId)\r\n        console.log('countyId', countyId)\r\n        let response = await getDetailByCountyIdAPI(countyId)\r\n\r\n        console.log('Response', response)\r\n\r\n        setBRDetail({\r\n            ...response\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const getVotingDate = async (countyId) => {\r\n        //console.log(props.userData.CountyId)\r\n\r\n        let response = await getVotingDateAPI(countyId)\r\n\r\n        window.localStorage.setItem('countyVotingData', response);\r\n\r\n        setCountyVotingData({\r\n            ...countyVotingData,\r\n            ...response\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const updateBallotReconcile = async (putbody) => {\r\n        const res = await axios.put(`${env.apiUrl}ballotReconcile/updateBallotReconcile`, putbody);\r\n        console.log(rows)\r\n        let updateData = rows\r\n        //let updateData = [...rows]\r\n        console.log(updateData)\r\n        let objIndex = updateData.findIndex((obj => obj.BallotReconcileId == putbody.BallotReconcileId));\r\n        updateData[objIndex].OriginalCount = putbody.OriginalCount\r\n        updateData[objIndex].Spoiled = putbody.Spoiled\r\n        updateData[objIndex].Provisional = parseInt(putbody.Provisional)\r\n        updateData[objIndex].Challenged = parseInt(putbody.Challenged)\r\n        updateData[objIndex].Unused = parseInt(putbody.Unused)\r\n        updateData[objIndex].BallotsCast = parseInt(putbody.BallotsCast)\r\n        updateData[objIndex].Comments = putbody.Comments\r\n\r\n        setRows(updateData)\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n\r\n        //getDetailByCountyId(props.userData.CountyId)\r\n\r\n\r\n        props.userData.CountyId ? setCountyId(props.userData.CountyId) : setCountyId(Number(window.localStorage.getItem('Ballot_countyId')))\r\n\r\n\r\n  \r\n\r\n        let previousVotingData = (window.localStorage.getItem('countyVotingData'))\r\n\r\n        console.log(previousVotingData)\r\n         \r\n        setCountyVotingData({\r\n            ...countyVotingData,\r\n            ...previousVotingData\r\n        })\r\n\r\n\r\n\r\n        let cashedDate = (window.localStorage.getItem('votingDate'))\r\n        console.log(cashedDate)\r\n\r\n        if (cashedDate) {\r\n            setVotingDate(cashedDate)\r\n        }\r\n\r\n\r\n        //getDataByVotingDate(cashedDate)\r\n\r\n\r\n\r\n\r\n\r\n    }, []);\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n        window.localStorage.setItem('Ballot_countyId', countyId);\r\n\r\n        getVotingDate(countyId)\r\n        //getVotingDate(props.userData.CountyId)\r\n\r\n\r\n\r\n    }, [countyId]);\r\n\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n        getDataByVotingDate(votingDate)\r\n\r\n\r\n    }, [votingDate, countyVotingData])\r\n\r\n\r\n    const tableIcons = {\r\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n        Export: forwardRef((props, ref) => <Edit style={{ color: \"Red\" }} {...props} ref={ref} />),\r\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n        SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    //for material table\r\n    const columns = [\r\n        {\r\n            title: \"VotingSite\", field: \"VotingSite\", editable: 'never',\r\n            cellStyle: {\r\n                minWidth: 250,\r\n                maxWidth: 250\r\n            },\r\n\r\n            headerStyle: {\r\n                width: 250,\r\n                minWidth: 250\r\n            },\r\n\r\n        },\r\n        {\r\n            title: \"BallotStyle\", field: \"BallotStyle\", editable: 'never',\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n        },\r\n        {\r\n            title: \"OriginalCount\", field: \"OriginalCount\", type: \"numeric\",\r\n            // editComponent: (props) => (\r\n            //     <TextField\r\n            //       type=\"text\"\r\n            //       error={props.value}\r\n            //       //helperText={props.value}\r\n            //       //value={props.value ? props.value : \"\"}\r\n            //       //onChange={(e) => props.onChange(e.target.value)}\r\n            //     />\r\n            //   ),\r\n\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n\r\n            validate: rowData => rowData.OriginalCount < 0 ? { isValid: false, helperText: 'No negative Number' } : true,\r\n\r\n\r\n\r\n\r\n        },\r\n        {\r\n            title: \"Spoiled\", field: \"Spoiled\", type: \"numeric\",\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n            validate: rowData => rowData.Spoiled < 0 ? { isValid: false, helperText: 'No negative Number' } : true,\r\n\r\n\r\n        },\r\n        {\r\n            title: \"Provisional\", field: \"Provisional\", type: \"numeric\",\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n            validate: rowData => rowData.Provisional < 0 ? { isValid: false, helperText: 'No negative Number' } : true,\r\n\r\n        },\r\n        {\r\n            title: \"Challenged\", field: \"Challenged\", type: \"numeric\",\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n            validate: rowData => rowData.Challenged < 0 ? { isValid: false, helperText: 'No negative Number' } : true,\r\n\r\n        },\r\n        {\r\n            title: \"Unused\", field: \"Unused\", type: \"numeric\",\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n            validate: rowData => rowData.Unused < 0 ? { isValid: false, helperText: 'No negative Number' } : true,\r\n\r\n        },\r\n        {\r\n            title: \"BallotsCast\", field: \"BallotsCast\", type: \"numeric\", editable: 'never',\r\n            cellStyle: {\r\n                minWidth: 5,\r\n                maxWidth: 5\r\n            },\r\n            headerStyle: {\r\n                width: 5,\r\n                minWidth: 5\r\n            },\r\n\r\n        },\r\n        {\r\n            title: \"Comments\", field: 'Comments',\r\n            //validate: rowData => rowData.Comments == '' ? { isValid: false, helperText: 'cannot be empty' } : true\r\n\r\n        }]\r\n\r\n\r\n\r\n    return (\r\n        <Grid>\r\n\r\n\r\n            <Grid container className={classes.entireForm} spacing={3} >\r\n                <Grid container item spacing={0} justifyContent='space-between' alignItems='stretch'>\r\n\r\n\r\n                    <Grid container item justifyContent='center' className={classes.title}>\r\n                        {title}\r\n\r\n                    </Grid>\r\n\r\n                    <Grid container item justifyContent='center' >\r\n\r\n\r\n                        <FormControl className={classes.formControl}>\r\n\r\n\r\n\r\n\r\n                            <InputLabel id=\"demo-simple-select-helper-label\">Voting Date</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-helper-label\"\r\n                                id=\"demo-simple-select-helper\"\r\n                                onChange={handleDateSelect}\r\n                                value={votingDate? votingDate: ''}\r\n                                \r\n//                                value= '05/13/2022'\r\n\r\n                            >\r\n                                {countyVotingData.votingList && countyVotingData.votingList.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n\r\n\r\n                            <FormHelperText>Please select a voting date</FormHelperText>\r\n\r\n\r\n\r\n\r\n                        </FormControl>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <Grid container item spacing={0} justifyContent='space-between' alignItems='stretch'>\r\n\r\n                        <Grid item xs >\r\n                            <Cards cardName={'County'} CardValue={countyVotingData.CountyName} />\r\n                        </Grid>\r\n\r\n                        <Grid item xs >\r\n                            <Cards cardName={'Voting Method'} CardValue={votingMethod.VotingMethod} />\r\n                        </Grid>\r\n\r\n                        <Grid item xs >\r\n                            <Cards cardName={'Election Date'} CardValue={votingMethod.ElectionDate} />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12}>\r\n                    <MaterialTable\r\n\r\n                        // style={true && { border: '2px solid black' }}\r\n\r\n                        style={\r\n                            { border: '1px solid black' }\r\n\r\n                        }\r\n\r\n\r\n\r\n                        title=\"Ballot Reconcile Form\"\r\n                        //icons={{ Export: () => 'Export' }}\r\n                        //icons={tableIcons}\r\n\r\n                        icons={{\r\n                            Export: () => <Button variant=\"contained\" color=\"secondary\">\r\n                                Export\r\n                            </Button>,\r\n\r\n                        }}\r\n\r\n                        columns={columns}\r\n                        data={rows}\r\n\r\n\r\n                        options={{\r\n                            search: false,\r\n                            paging: false,\r\n                            sorting: false,\r\n                            actionsColumnIndex: -1,\r\n                            tableLayout: 'auto',\r\n                            rowStyle: {\r\n                                fontSize: 14,\r\n                            },\r\n                            exportButton: true,\r\n                            exportFileName: countyVotingData.CountyName + \"_\" + votingMethod.VotingMethod + \"_\" + votingMethod.VotingDateSelected\r\n                            // toolbarButtonAlignment: 'left',   `test-${new Date().toISOString()}`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        }}\r\n\r\n\r\n                        editable={{\r\n\r\n                            onRowUpdate:\r\n\r\n                                (newData, oldData) => new Promise((resolve, reject) => {\r\n\r\n\r\n                                    //setFormValidation({ ...formValidation, CandidatesCounts: false })\r\n                                    //Backend call\r\n                                    console.log(oldData)\r\n                                    let ReconcileID = oldData.BallotReconcileId\r\n                                    //(Original Count – Spoiled – Provisional – Unused – Challenged)\r\n\r\n                                    let BallotsCast = parseInt(newData.OriginalCount) - parseInt(newData.Spoiled) -\r\n                                        parseInt(newData.Provisional) - parseInt(newData.Unused) - parseInt(newData.Challenged)\r\n\r\n\r\n                                    let putbody = {\r\n\r\n                                        \"BallotReconcileId\": newData.BallotReconcileId,\r\n                                        \"OriginalCount\": parseInt(newData.OriginalCount),\r\n                                        \"Spoiled\": parseInt(newData.Spoiled),\r\n                                        \"Provisional\": parseInt(newData.Provisional),\r\n                                        \"Challenged\": parseInt(newData.Challenged),\r\n                                        \"Unused\": parseInt(newData.Unused),\r\n                                        \"BallotsCast\": parseInt(BallotsCast),\r\n                                        \"Comments\": newData.Comments\r\n\r\n                                    }\r\n\r\n\r\n                                    console.log(newData)\r\n\r\n                                    updateBallotReconcile(putbody).then(response => {\r\n                                        console.log(response)\r\n                                        resolve()\r\n                                    });\r\n\r\n\r\n                                }),\r\n\r\n\r\n                        }}\r\n\r\n\r\n\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container className={classes.entireForm} spacing={0} >\r\n\r\n\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n\r\n    )\r\n\r\n\r\n\r\n};\r\n\r\nexport default BallotReconciliation;","import axios from \"axios\";\r\nimport { env } from \"../variables\";\r\n\r\nexport const authenticateUser = async (email, password)=>{\r\n    let putbody = {\r\n      \"email\": email,\r\n      \"password\": password\r\n    }\r\n\r\n\r\n    const response = await axios.put(\r\n        `${env.apiUrl}auth/check/${email}`, putbody\r\n      );\r\n\r\n      if (response.data === \"User not found\"){\r\n        return \"Email not in the system\"\r\n      }else{\r\n        let userData = await response.data;\r\n\r\n        return userData;\r\n\r\n      }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getAllCounty = async ()=>{\r\n \r\n  let response = await axios.get(\r\n    `${env.apiUrl}auth/allCounty/`\r\n  );\r\n\r\n  return response\r\n\r\n}\r\n\r\nexport const getCountyApps = async (countyId)=>{\r\n \r\n  let response = await axios.get(\r\n    `${env.apiUrl}auth/getAppList/${countyId}`\r\n  );\r\n\r\n  return response.data\r\n\r\n}\r\n\r\n\r\nexport const getAppList = async ()=>{\r\n             \r\n  let response = await axios.get(\r\n    `${env.apiUrl}auth/getAppList/`\r\n  );\r\n\r\n  return response\r\n}","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\n\r\n\r\nimport { authenticateUser, getAllCounty, getAppList, getCountyApps } from './api';\r\nimport axios from 'axios';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://www.ncsbe.gov/\">\r\n        NCSBE\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper2: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[1],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function LoginPage(props) {\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  const [selectedCounty, setSelectedCounty] = useState();\r\n\r\n  const [selectedApp, setSelectedApp] = useState();\r\n\r\n  const [counties, setCounties] = useState();\r\n\r\n  const [appLists, setAppLists] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    //console.log('conties data from hook',counties[0].label)\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const handleEmail = (e) => {\r\n    console.log(e.target.value)\r\n    setEmail(e.target.value)\r\n  }\r\n\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  // for county drop down\r\n  const getAllCountyFromAPI = async () => {\r\n    let response = await getAllCounty();\r\n    console.log(response)\r\n\r\n    setCounties(response.data);\r\n    console.log(counties)\r\n  }\r\n\r\n\r\n  //for appLists drop down\r\n\r\n  const getAppListFromAPI = async () => {\r\n    let respsone = await getAppList();\r\n    console.log('appList', respsone)\r\n\r\n    //setAppLists(respsone.data)\r\n\r\n\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getAllCountyFromAPI()\r\n    getAppListFromAPI()\r\n    console.log('conties data from hook', counties)\r\n    //window.localStorage.removeItem('votingDate');\r\n    \r\n\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    console.log(counties);\r\n    console.log(appLists);\r\n\r\n  }, [appLists])\r\n\r\n\r\n  const handleCountySelect = async (e) => {\r\n\r\n\r\n    setSelectedCounty(e.target.value)\r\n    let appList = await getCountyApps(e.target.value)\r\n    console.log(appList)\r\n    setAppLists(appList)\r\n  }\r\n\r\n  const handleAppSelect = (e) => {\r\n    setSelectedApp(e.target.value)\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    //alert (e.target.value)\r\n    //console.log(e.target)\r\n    props.onSelect(e.target.value);\r\n\r\n    //history.push('/audit-form')\r\n\r\n  }\r\n\r\n\r\n  const goHandler = () => {\r\n    //selectedCounty \r\n    console.log(selectedCounty);\r\n    console.log(selectedApp);\r\n\r\n    if (selectedCounty == undefined) {\r\n      alert(\"Please select a county\");\r\n    }\r\n\r\n    if (selectedApp == undefined) {\r\n      alert(\"Please select an app\");\r\n    }\r\n\r\n    if (selectedApp == 'Sample Audit'){\r\n      props.onSelect(selectedCounty);\r\n\r\n      history.push('/audit-form')\r\n    }\r\n\r\n    else if  (selectedApp == 'Ballot Reconciliation'){\r\n      props.onSelect(selectedCounty);\r\n\r\n      history.push('/Ballot-Reconciliation')\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const handleLogin = async () => {\r\n    //get data through API and vrify login\r\n    if (!email) { alert(\"please enter email\") }\r\n    if (!password) { alert(\"please enter password\") }\r\n\r\n\r\n    // props.onUserAuthenticated({\r\n    //   IsDefault: \"False\",\r\n    //   CountyId: 1\r\n    // });\r\n    // history.push('/audit-form');\r\n    // return;\r\n\r\n    const userData = await authenticateUser(email, password);\r\n\r\n    if (userData === \"Account not in the system\") {\r\n      alert(userData)\r\n    }\r\n    else if (userData === \"login fail\") {\r\n      alert(\"Wrong Password\")\r\n    }\r\n    else {\r\n      //Successful login\r\n\r\n\r\n      if (userData.IsDefault === 'True') {\r\n        props.onUserAuthenticated(\r\n          //webUserId: userData.WebUserId\r\n          userData\r\n        );\r\n\r\n\r\n\r\n        history.push('/change-password')\r\n      } else {\r\n        console.log(userData.CountyId)\r\n\r\n        props.onUserAuthenticated(\r\n          //webUserId: userData.WebUserId\r\n          userData\r\n        );\r\n        history.push('/audit-form')\r\n      }\r\n    }\r\n\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        {/* <Avatar className={classes.avatar}>\r\n        <LockOutlinedIcon />\r\n      </Avatar> */}\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Please select county and application.\r\n        </Typography>\r\n\r\n        <FormControl className={classes.formControl}>\r\n\r\n\r\n          <InputLabel id=\"demo-simple-select-helper-label\">County</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-helper-label\"\r\n            id=\"demo-simple-select-helper\"\r\n            //value={age}\r\n            //onChange={handleChange}\r\n            onChange={handleCountySelect}\r\n\r\n          >\r\n            {counties && counties.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n\r\n\r\n          <FormHelperText>Please select your county</FormHelperText>\r\n\r\n\r\n\r\n\r\n        </FormControl>\r\n\r\n\r\n        <FormControl className={classes.formControl}>\r\n\r\n\r\n          <InputLabel id=\"demo-simple-select-helper-label\">Application</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-helper-label\"\r\n            id=\"demo-simple-select-helper\"\r\n            //value={age}\r\n            onChange={handleAppSelect}\r\n          >\r\n            {appLists && appLists.map((option) => (\r\n              <MenuItem key={option} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n\r\n\r\n          <FormHelperText>Please select application.</FormHelperText>\r\n\r\n        </FormControl>\r\n\r\n        <Button variant=\"outlined\" color=\"primary\" onClick={goHandler} >\r\n          GO\r\n\r\n        </Button>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n      <Modal\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        // closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper2}>\r\n            <h2 >Forget Password?</h2>\r\n            <p >Please send a help desk ticket to </p>\r\n            <p >HelpRequest.SBOE@ncbse.gov</p>\r\n            <p >to rest your password </p>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from \"axios\";\r\nimport { env } from \"../variables\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://www.ncsbe.gov/\">\r\n        NCSBE\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\n\r\nconst updatePassword = async (webUserId, password) => {\r\n  \r\n  let putbody = {\r\n    \"WebUserId\": webUserId,\r\n    \"UserPassword\": password\r\n  }\r\n  //console.log('updatFunction', putbody);\r\n  const res = await axios.put(`${env.apiUrl}auth/updateWebUser`, putbody);\r\n}\r\n\r\n\r\n\r\nexport default function ChargePassword(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const [newPassword, setNewPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n  const [error, setError] = useState('')\r\n  const [webUserId, setWebUserId] = useState();\r\n\r\n  //setWebUserId(props.userData.WebUserId)\r\n\r\n  const handleNew = (e) => {\r\n    \r\n    if (e.target.value.length< 8){\r\n      setError('Password must have at least 8 characters')\r\n    }else{\r\n      setError('')\r\n      setNewPassword(e.target.value)\r\n    }\r\n    \r\n  }\r\n\r\n  const handleConfirm = (e) => {\r\n    setConfirmPassword(e.target.value)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setWebUserId(props.userData.WebUserId)\r\n\r\n  }, []);\r\n\r\n\r\n  const handleChangePassword = () => {\r\n    //ev.preventDefault()\r\n    \r\n    if (newPassword === undefined){\r\n      \r\n      setError('You must specify a password')\r\n    }\r\n\r\n  \r\n\r\n    if (newPassword === confirmPassword && newPassword.length >=8) {\r\n      //props.onPasswordChanged();\r\n      //console.log(props.userData.WebUserId) \r\n      updatePassword(webUserId, newPassword)\r\n      //alert(\"Passwords Changed, please login with new password\")\r\n      alert(\"Password changed, please login with new password\")\r\n      history.push('/login');\r\n    } else {\r\n      alert(\"Passwords don't match\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Change Password\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"New Password\"\r\n            label=\"New Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n\r\n            autoComplete=\"current-password\"\r\n            onChange={handleNew}\r\n            error ={error}\r\n            helperText ={error}\r\n            \r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"Confirm Password\"\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handleConfirm}\r\n          />\r\n\r\n          <Button\r\n            type=\"button\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={handleChangePassword}\r\n          >\r\n            Change Password\r\n          </Button>\r\n\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\n//BrowserRouter as Router,\r\n//HashRouter as Router,\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useHistory,\r\n  Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport \"./styles.css\";\r\nimport AuditForm from \"./AuditForm\"; //it will look at index.js same as from \"./AuditForm/index\"  \"./AuditForm/AuditForm\"\r\nimport BallotReconciliation from \"./BallotReconciliation\";\r\nimport LoginPage from \"./LoginPage\";\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport Cookies from 'js-cookie';\r\nimport { clearCookiesInterval, setLoginCookies } from './loginCookies';\r\nimport { env } from \"./variables\";\r\n \r\nfunction initUserData (){\r\n  const userDataCookies = Cookies.get('userData')\r\n  return userDataCookies === undefined ? {} : JSON.parse(userDataCookies)\r\n}\r\n\r\nfunction Logout(props) {\r\n  const history = useHistory();\r\n  props.onLogout();\r\n  history.replace('/login');\r\n  return null;\r\n}\r\n\r\nconst App = () => {\r\n  const [userData, setUserData] = useState(initUserData());\r\n  const [countyId, setCountyId] = useState();\r\n  console.log('user data',userData)\r\n\r\n  const handleUserAuthenticated =(userData)=>{\r\n    // console.log(userData);\r\n    setUserData(userData);\r\n    //setLoginCookies(userData);\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    clearCookiesInterval();\r\n    setUserData({});\r\n    Cookies.remove('userData');\r\n  }\r\n\r\n  const handleOnselect = (countyIdValue) =>{\r\n    //setCountyId({CountyId: countyIdValue})\r\n    setUserData({CountyId: countyIdValue})\r\n  }\r\n\r\n  const fileurl = `${env.apiUrl}files/User-Manual.docx`\r\n  //<a href='https://sampleaudit.ncsbe.gov/files/User-Manual.docx' download>User-Manual</a>\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            {/* <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li> */}\r\n            <li>\r\n              {userData.IsDefault === \"False\" && <Link to=\"/audit-form\">Audit Form</Link> }\r\n            </li>\r\n            {/* <li>\r\n              {userData.IsDefault === \"False\"? <Link to=\"/logout\">Logout</Link>:<Link to=\"/login\">Login</Link>}\r\n            </li> */}\r\n            <li>\r\n              {<Link to=\"/\">County Selection</Link> }\r\n            </li>\r\n            <li>\r\n            <a href={`${env.apiUrl}files/User-Manual.docx`} download>User-Manual</a>\r\n            \r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n         \r\n        <Switch>\r\n          <Route exact path=\"/login\">\r\n            <LoginPage onUserAuthenticated = {handleUserAuthenticated} onSelect = {handleOnselect}/>\r\n          </Route>\r\n          <Route exact path=\"/logout\">\r\n            <Logout onLogout={handleLogout} />\r\n          </Route>\r\n          <Route path=\"/change-password\">\r\n            <ChangePassword userData = {userData}/>\r\n          </Route>\r\n          <Route exact path={\"/audit-form\"}  >\r\n            {<AuditForm userData = {userData}/>}\r\n            {/* {userData.IsDefault ? <AuditForm userData = {userData}/> : <Redirect to = '/login'/> } */}\r\n          </Route>\r\n          <Route exact path={\"/Ballot-Reconciliation\"}  >\r\n            {<BallotReconciliation userData = {userData}/>}\r\n            {/* {userData.IsDefault ? <AuditForm userData = {userData}/> : <Redirect to = '/login'/> } */}\r\n          </Route>\r\n\r\n          <Route path= \"/\">\r\n            <LoginPage onUserAuthenticated = {handleUserAuthenticated} onSelect = {handleOnselect} />\r\n          </Route>\r\n        </Switch>\r\n     \r\n       \r\n\r\n      </div>\r\n      </Router>\r\n\r\n      \r\n    \r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from 'react-router-dom'\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n      <HashRouter>\n      <App />\n      </HashRouter>\n,\n  rootElement\n);"],"sourceRoot":""}